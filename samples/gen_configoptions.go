// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option"
// Version: 0.0.1

package sample

import (
	log "log"
)

var _ = ConfigOptionDeclareWithDefault()

// Google Public DNS provides two distinct DoH APIs at these endpoints
// Using the GET method can reduce latency, as it is cached more effectively.
// RFC 8484 GET requests must have a ?dns= query parameter with a Base64Url encoded DNS message. The GET method is the only method supported for the JSON API.
type ConfigOptions struct {
	// test comment 1
	// test comment 2
	TestNil  interface{} // test comment 3
	TestBool bool        // test comment 4
	// 这里是函数注释1
	// 这里是函数注释2
	TestInt         int      // default 32
	TestInt64       int64    // int64 line
	TestSliceInt    []int    // slice int
	TestSliceInt64  []int64  // slice int64 line
	TestSliceString []string // slice string
	TestSliceBool   []bool   // slice bool line comment
	TestSliceIntNil []int    // TestSliceIntNil line comment
	TestSliceByte   []byte   // TestSliceByte line comment
	// SliceInt Doc
	TestSliceIntEmpty []int
	TestMapIntInt     map[int]int    // TestMapIntInt line comment
	TestMapIntString  map[int]string // TestMapIntString line comment
	TestMapStringInt  map[string]int // TestMapStringInt line comment
	// MapStringString Doc
	TestMapStringString map[string]string // MapStringString Line Comment
	TestString          string
	// Food Doc
	Food (*string) // Food Line Comment
	// Walk Doc
	Walk func() // Walk Line Comment
	// TestNilFunc
	TestNilFunc (func()) // 中文1
	// TestReserved1_
	TestReserved1 []byte // 在调优或者运行阶段，我们可能需要动态查看连接池中的一些指标，
	// 来判断设置的值是否合理，或者检测连接池是否有异常情况出现
	TestReserved2 int // TestReserved2Inner after
}

// test comment 1
// test comment 2
func WithTestNil(v interface{}) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestNil
		cc.TestNil = v
		return WithTestNil(previous)
	}
}
func WithTestBool(v bool) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestBool
		cc.TestBool = v
		return WithTestBool(previous)
	}
}

// 这里是函数注释1
// 这里是函数注释2
func WithTestInt(v int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestInt
		cc.TestInt = v
		return WithTestInt(previous)
	}
}
func WithTestInt64(v int64) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestInt64
		cc.TestInt64 = v
		return WithTestInt64(previous)
	}
}
func WithTestSliceInt(v ...int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceInt
		cc.TestSliceInt = v
		return WithTestSliceInt(previous...)
	}
}
func WithTestSliceInt64(v ...int64) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceInt64
		cc.TestSliceInt64 = v
		return WithTestSliceInt64(previous...)
	}
}
func WithTestSliceString(v ...string) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceString
		cc.TestSliceString = v
		return WithTestSliceString(previous...)
	}
}
func WithTestSliceBool(v ...bool) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceBool
		cc.TestSliceBool = v
		return WithTestSliceBool(previous...)
	}
}
func WithTestSliceIntNil(v ...int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceIntNil
		cc.TestSliceIntNil = v
		return WithTestSliceIntNil(previous...)
	}
}
func WithTestSliceByte(v []byte) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceByte
		cc.TestSliceByte = v
		return WithTestSliceByte(previous)
	}
}

// SliceInt Doc
func WithTestSliceIntEmpty(v ...int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestSliceIntEmpty
		cc.TestSliceIntEmpty = v
		return WithTestSliceIntEmpty(previous...)
	}
}
func WithTestMapIntInt(v map[int]int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestMapIntInt
		cc.TestMapIntInt = v
		return WithTestMapIntInt(previous)
	}
}
func WithTestMapIntString(v map[int]string) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestMapIntString
		cc.TestMapIntString = v
		return WithTestMapIntString(previous)
	}
}
func WithTestMapStringInt(v map[string]int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestMapStringInt
		cc.TestMapStringInt = v
		return WithTestMapStringInt(previous)
	}
}

// MapStringString Doc
func WithTestMapStringString(v map[string]string) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestMapStringString
		cc.TestMapStringString = v
		return WithTestMapStringString(previous)
	}
}
func WithTestString(v string) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestString
		cc.TestString = v
		return WithTestString(previous)
	}
}

// Food Doc
func WithFood(v *string) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.Food
		cc.Food = v
		return WithFood(previous)
	}
}

// Walk Doc
func WithWalk(v func()) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.Walk
		cc.Walk = v
		return WithWalk(previous)
	}
}

// TestNilFunc
func WithTestNilFunc(v func()) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestNilFunc
		cc.TestNilFunc = v
		return WithTestNilFunc(previous)
	}
}

// TestReserved1_
func withTestReserved1(v []byte) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestReserved1
		cc.TestReserved1 = v
		return withTestReserved1(previous)
	}
}

// 来判断设置的值是否合理，或者检测连接池是否有异常情况出现
func withTestReserved2(v int) ConfigOption {
	return func(cc *ConfigOptions) ConfigOption {
		previous := cc.TestReserved2
		cc.TestReserved2 = v
		return withTestReserved2(previous)
	}
}

// SetOption modify options
func (cc *ConfigOptions) SetOption(opt ConfigOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *ConfigOptions) ApplyOption(opts ...ConfigOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *ConfigOptions) GetSetOption(opt ConfigOption) ConfigOption {
	return opt(cc)
}

// ConfigOption option define
type ConfigOption func(cc *ConfigOptions) ConfigOption

// NewConfigOptions create options instance.
func NewConfigOptions(opts ...ConfigOption) *ConfigOptions {
	cc := newDefaultConfigOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogConfigOptions != nil {
		watchDogConfigOptions(cc)
	}
	return cc
}

// InstallConfigOptionsWatchDog install watch dog
func InstallConfigOptionsWatchDog(dog func(cc *ConfigOptions)) {
	watchDogConfigOptions = dog
}

var watchDogConfigOptions func(cc *ConfigOptions)

// newDefaultConfigOptions new option with default value
func newDefaultConfigOptions() *ConfigOptions {
	cc := &ConfigOptions{
		TestNil:             nil,
		TestBool:            false,
		TestInt:             32,
		TestInt64:           32,
		TestSliceInt:        []int{1, 2, 3},
		TestSliceInt64:      []int64{1, 2, 3},
		TestSliceString:     []string{"test1", "test2"},
		TestSliceBool:       []bool{false, true},
		TestSliceIntNil:     nil,
		TestSliceByte:       nil,
		TestSliceIntEmpty:   nil,
		TestMapIntInt:       map[int]int{1: 1, 2: 2, 3: 3},
		TestMapIntString:    map[int]string{1: "test"},
		TestMapStringInt:    map[string]int{"test": 1},
		TestMapStringString: map[string]string{"test": "test"},
		TestString:          "Meow",
		Food:                nil,
		Walk: func() {
			log.Println("Walking")
		},
		TestNilFunc:   nil,
		TestReserved1: nil,
		TestReserved2: 1,
	}
	return cc
}
