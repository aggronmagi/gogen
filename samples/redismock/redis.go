// Code generated by "gogen imake"; DO NOT EDIT.
// Exec: "gogen imake github.com/go-redis/redis/v8 --to redismock -m .*Cmd$ -o samples/redismock/redis.go --mock"
// Version: 0.0.1

package redismock

import (
	time "time"

	redis "github.com/go-redis/redis/v8"
)

type BoolCmdIFace interface {
	baseCmdIFace
	Result() (bool, error)
	String() string
	Val() bool
}

type BoolSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]bool, error)
	String() string
	Val() []bool
}

type ClusterSlotsCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.ClusterSlot, error)
	String() string
	Val() []redis.ClusterSlot
}

type CmdIFace interface {
	baseCmdIFace
	Bool() (bool, error)
	Float32() (float32, error)
	Float64() (float64, error)
	Int() (int, error)
	Int64() (int64, error)
	Result() (interface{}, error)
	String() string
	Text() (string, error)
	Uint64() (uint64, error)
	Val() interface{}
}

type CommandsInfoCmdIFace interface {
	baseCmdIFace
	Result() (map[string]*redis.CommandInfo, error)
	String() string
	Val() map[string]*redis.CommandInfo
}

type DurationCmdIFace interface {
	baseCmdIFace
	Result() (time.Duration, error)
	String() string
	Val() time.Duration
}

type FloatCmdIFace interface {
	baseCmdIFace
	Result() (float64, error)
	String() string
	Val() float64
}

type FloatSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]float64, error)
	String() string
	Val() []float64
}

type GeoLocationCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.GeoLocation, error)
	String() string
	Val() []redis.GeoLocation
}

type GeoPosCmdIFace interface {
	baseCmdIFace
	Result() ([]*redis.GeoPos, error)
	String() string
	Val() []*redis.GeoPos
}

type GeoSearchLocationCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.GeoLocation, error)
	String() string
	Val() []redis.GeoLocation
}

type IntCmdIFace interface {
	baseCmdIFace
	Result() (int64, error)
	String() string
	Uint64() (uint64, error)
	Val() int64
}

type IntSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]int64, error)
	String() string
	Val() []int64
}

type ScanCmdIFace interface {
	baseCmdIFace
	// Iterator creates a new ScanIterator.
	Iterator() *redis.ScanIterator
	Result() (keys []string, cursor uint64, err error)
	String() string
	Val() (keys []string, cursor uint64)
}

type SliceCmdIFace interface {
	baseCmdIFace
	Result() ([]interface{}, error)
	// Scan scans the results from the map into a destination struct. The map keys
	// are matched in the Redis struct fields by the `redis:"field"` tag.
	Scan(dst interface{}) error
	String() string
	Val() []interface{}
}

type SlowLogCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.SlowLog, error)
	String() string
	Val() []redis.SlowLog
}

type StatusCmdIFace interface {
	baseCmdIFace
	Result() (string, error)
	String() string
	Val() string
}

type StringCmdIFace interface {
	baseCmdIFace
	Bool() (bool, error)
	Bytes() ([]byte, error)
	Float32() (float32, error)
	Float64() (float64, error)
	Int() (int, error)
	Int64() (int64, error)
	Result() (string, error)
	Scan(val interface{}) error
	String() string
	Time() (time.Time, error)
	Uint64() (uint64, error)
	Val() string
}

type StringIntMapCmdIFace interface {
	baseCmdIFace
	Result() (map[string]int64, error)
	String() string
	Val() map[string]int64
}

type StringSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]string, error)
	ScanSlice(container interface{}) error
	String() string
	Val() []string
}

type StringStringMapCmdIFace interface {
	baseCmdIFace
	Result() (map[string]string, error)
	// Scan scans the results from the map into a destination struct. The map keys
	// are matched in the Redis struct fields by the `redis:"field"` tag.
	Scan(dst interface{}) error
	String() string
	Val() map[string]string
}

type StringStructMapCmdIFace interface {
	baseCmdIFace
	Result() (map[string]struct{}, error)
	String() string
	Val() map[string]struct{}
}

type TimeCmdIFace interface {
	baseCmdIFace
	Result() (time.Time, error)
	String() string
	Val() time.Time
}

type XAutoClaimCmdIFace interface {
	baseCmdIFace
	Result() (messages []redis.XMessage, start string, err error)
	String() string
	Val() (messages []redis.XMessage, start string)
}

type XAutoClaimJustIDCmdIFace interface {
	baseCmdIFace
	Result() (ids []string, start string, err error)
	String() string
	Val() (ids []string, start string)
}

type XInfoConsumersCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.XInfoConsumer, error)
	String() string
	Val() []redis.XInfoConsumer
}

type XInfoGroupsCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.XInfoGroup, error)
	String() string
	Val() []redis.XInfoGroup
}

type XInfoStreamCmdIFace interface {
	baseCmdIFace
	Result() (*redis.XInfoStream, error)
	String() string
	Val() *redis.XInfoStream
}

type XInfoStreamFullCmdIFace interface {
	baseCmdIFace
	Result() (*redis.XInfoStreamFull, error)
	String() string
	Val() *redis.XInfoStreamFull
}

type XMessageSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.XMessage, error)
	String() string
	Val() []redis.XMessage
}

type XPendingCmdIFace interface {
	baseCmdIFace
	Result() (*redis.XPending, error)
	String() string
	Val() *redis.XPending
}

type XPendingExtCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.XPendingExt, error)
	String() string
	Val() []redis.XPendingExt
}

type XStreamSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.XStream, error)
	String() string
	Val() []redis.XStream
}

type ZSliceCmdIFace interface {
	baseCmdIFace
	Result() ([]redis.Z, error)
	String() string
	Val() []redis.Z
}

type ZWithKeyCmdIFace interface {
	baseCmdIFace
	Result() (*redis.ZWithKey, error)
	String() string
	Val() *redis.ZWithKey
}

type baseCmdIFace interface {
	Args() []interface{}
	Err() error
	FullName() string
	Name() string
	SetErr(e error)
}
