// Code generated by MockGen. DO NOT EDIT.
// Source: samples/redismock/redis.go

// Package redismock is a generated GoMock package.
package redismock

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis/v8"
	gomock "github.com/golang/mock/gomock"
)

// MockBoolCmdIFace is a mock of BoolCmdIFace interface.
type MockBoolCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockBoolCmdIFaceMockRecorder
}

// MockBoolCmdIFaceMockRecorder is the mock recorder for MockBoolCmdIFace.
type MockBoolCmdIFaceMockRecorder struct {
	mock *MockBoolCmdIFace
}

// NewMockBoolCmdIFace creates a new mock instance.
func NewMockBoolCmdIFace(ctrl *gomock.Controller) *MockBoolCmdIFace {
	mock := &MockBoolCmdIFace{ctrl: ctrl}
	mock.recorder = &MockBoolCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoolCmdIFace) EXPECT() *MockBoolCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockBoolCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockBoolCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockBoolCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockBoolCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockBoolCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockBoolCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockBoolCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockBoolCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockBoolCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockBoolCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBoolCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBoolCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockBoolCmdIFace) Result() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockBoolCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockBoolCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockBoolCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockBoolCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockBoolCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockBoolCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockBoolCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockBoolCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockBoolCmdIFace) Val() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockBoolCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockBoolCmdIFace)(nil).Val))
}

// MockBoolSliceCmdIFace is a mock of BoolSliceCmdIFace interface.
type MockBoolSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockBoolSliceCmdIFaceMockRecorder
}

// MockBoolSliceCmdIFaceMockRecorder is the mock recorder for MockBoolSliceCmdIFace.
type MockBoolSliceCmdIFaceMockRecorder struct {
	mock *MockBoolSliceCmdIFace
}

// NewMockBoolSliceCmdIFace creates a new mock instance.
func NewMockBoolSliceCmdIFace(ctrl *gomock.Controller) *MockBoolSliceCmdIFace {
	mock := &MockBoolSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockBoolSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoolSliceCmdIFace) EXPECT() *MockBoolSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockBoolSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockBoolSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockBoolSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockBoolSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockBoolSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockBoolSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockBoolSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBoolSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockBoolSliceCmdIFace) Result() ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockBoolSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockBoolSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockBoolSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockBoolSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockBoolSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockBoolSliceCmdIFace) Val() []bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]bool)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockBoolSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockBoolSliceCmdIFace)(nil).Val))
}

// MockClusterSlotsCmdIFace is a mock of ClusterSlotsCmdIFace interface.
type MockClusterSlotsCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockClusterSlotsCmdIFaceMockRecorder
}

// MockClusterSlotsCmdIFaceMockRecorder is the mock recorder for MockClusterSlotsCmdIFace.
type MockClusterSlotsCmdIFaceMockRecorder struct {
	mock *MockClusterSlotsCmdIFace
}

// NewMockClusterSlotsCmdIFace creates a new mock instance.
func NewMockClusterSlotsCmdIFace(ctrl *gomock.Controller) *MockClusterSlotsCmdIFace {
	mock := &MockClusterSlotsCmdIFace{ctrl: ctrl}
	mock.recorder = &MockClusterSlotsCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterSlotsCmdIFace) EXPECT() *MockClusterSlotsCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockClusterSlotsCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockClusterSlotsCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockClusterSlotsCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockClusterSlotsCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockClusterSlotsCmdIFace) Result() ([]redis.ClusterSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.ClusterSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockClusterSlotsCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockClusterSlotsCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockClusterSlotsCmdIFace) Val() []redis.ClusterSlot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.ClusterSlot)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockClusterSlotsCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockClusterSlotsCmdIFace)(nil).Val))
}

// MockCmdIFace is a mock of CmdIFace interface.
type MockCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockCmdIFaceMockRecorder
}

// MockCmdIFaceMockRecorder is the mock recorder for MockCmdIFace.
type MockCmdIFaceMockRecorder struct {
	mock *MockCmdIFace
}

// NewMockCmdIFace creates a new mock instance.
func NewMockCmdIFace(ctrl *gomock.Controller) *MockCmdIFace {
	mock := &MockCmdIFace{ctrl: ctrl}
	mock.recorder = &MockCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdIFace) EXPECT() *MockCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockCmdIFace)(nil).Args))
}

// Bool mocks base method.
func (m *MockCmdIFace) Bool() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bool indicates an expected call of Bool.
func (mr *MockCmdIFaceMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockCmdIFace)(nil).Bool))
}

// Err mocks base method.
func (m *MockCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCmdIFace)(nil).Err))
}

// Float32 mocks base method.
func (m *MockCmdIFace) Float32() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float32")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float32 indicates an expected call of Float32.
func (mr *MockCmdIFaceMockRecorder) Float32() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float32", reflect.TypeOf((*MockCmdIFace)(nil).Float32))
}

// Float64 mocks base method.
func (m *MockCmdIFace) Float64() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float64")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float64 indicates an expected call of Float64.
func (mr *MockCmdIFaceMockRecorder) Float64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float64", reflect.TypeOf((*MockCmdIFace)(nil).Float64))
}

// FullName mocks base method.
func (m *MockCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockCmdIFace)(nil).FullName))
}

// Int mocks base method.
func (m *MockCmdIFace) Int() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockCmdIFaceMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockCmdIFace)(nil).Int))
}

// Int64 mocks base method.
func (m *MockCmdIFace) Int64() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int64 indicates an expected call of Int64.
func (mr *MockCmdIFaceMockRecorder) Int64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockCmdIFace)(nil).Int64))
}

// Name mocks base method.
func (m *MockCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockCmdIFace) Result() (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCmdIFace)(nil).String))
}

// Text mocks base method.
func (m *MockCmdIFace) Text() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text.
func (mr *MockCmdIFaceMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockCmdIFace)(nil).Text))
}

// Uint64 mocks base method.
func (m *MockCmdIFace) Uint64() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uint64 indicates an expected call of Uint64.
func (mr *MockCmdIFaceMockRecorder) Uint64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint64", reflect.TypeOf((*MockCmdIFace)(nil).Uint64))
}

// Val mocks base method.
func (m *MockCmdIFace) Val() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockCmdIFace)(nil).Val))
}

// MockCommandsInfoCmdIFace is a mock of CommandsInfoCmdIFace interface.
type MockCommandsInfoCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockCommandsInfoCmdIFaceMockRecorder
}

// MockCommandsInfoCmdIFaceMockRecorder is the mock recorder for MockCommandsInfoCmdIFace.
type MockCommandsInfoCmdIFaceMockRecorder struct {
	mock *MockCommandsInfoCmdIFace
}

// NewMockCommandsInfoCmdIFace creates a new mock instance.
func NewMockCommandsInfoCmdIFace(ctrl *gomock.Controller) *MockCommandsInfoCmdIFace {
	mock := &MockCommandsInfoCmdIFace{ctrl: ctrl}
	mock.recorder = &MockCommandsInfoCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandsInfoCmdIFace) EXPECT() *MockCommandsInfoCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockCommandsInfoCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockCommandsInfoCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockCommandsInfoCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockCommandsInfoCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockCommandsInfoCmdIFace) Result() (map[string]*redis.CommandInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(map[string]*redis.CommandInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockCommandsInfoCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockCommandsInfoCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockCommandsInfoCmdIFace) Val() map[string]*redis.CommandInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(map[string]*redis.CommandInfo)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockCommandsInfoCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockCommandsInfoCmdIFace)(nil).Val))
}

// MockDurationCmdIFace is a mock of DurationCmdIFace interface.
type MockDurationCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockDurationCmdIFaceMockRecorder
}

// MockDurationCmdIFaceMockRecorder is the mock recorder for MockDurationCmdIFace.
type MockDurationCmdIFaceMockRecorder struct {
	mock *MockDurationCmdIFace
}

// NewMockDurationCmdIFace creates a new mock instance.
func NewMockDurationCmdIFace(ctrl *gomock.Controller) *MockDurationCmdIFace {
	mock := &MockDurationCmdIFace{ctrl: ctrl}
	mock.recorder = &MockDurationCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDurationCmdIFace) EXPECT() *MockDurationCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockDurationCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockDurationCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockDurationCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockDurationCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockDurationCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockDurationCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockDurationCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockDurationCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockDurationCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockDurationCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDurationCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDurationCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockDurationCmdIFace) Result() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockDurationCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockDurationCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockDurationCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockDurationCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockDurationCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockDurationCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockDurationCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDurationCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockDurationCmdIFace) Val() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockDurationCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockDurationCmdIFace)(nil).Val))
}

// MockFloatCmdIFace is a mock of FloatCmdIFace interface.
type MockFloatCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockFloatCmdIFaceMockRecorder
}

// MockFloatCmdIFaceMockRecorder is the mock recorder for MockFloatCmdIFace.
type MockFloatCmdIFaceMockRecorder struct {
	mock *MockFloatCmdIFace
}

// NewMockFloatCmdIFace creates a new mock instance.
func NewMockFloatCmdIFace(ctrl *gomock.Controller) *MockFloatCmdIFace {
	mock := &MockFloatCmdIFace{ctrl: ctrl}
	mock.recorder = &MockFloatCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloatCmdIFace) EXPECT() *MockFloatCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockFloatCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockFloatCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockFloatCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockFloatCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockFloatCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockFloatCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockFloatCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockFloatCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockFloatCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockFloatCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFloatCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFloatCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockFloatCmdIFace) Result() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockFloatCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockFloatCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockFloatCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockFloatCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockFloatCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockFloatCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFloatCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFloatCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockFloatCmdIFace) Val() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockFloatCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockFloatCmdIFace)(nil).Val))
}

// MockFloatSliceCmdIFace is a mock of FloatSliceCmdIFace interface.
type MockFloatSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockFloatSliceCmdIFaceMockRecorder
}

// MockFloatSliceCmdIFaceMockRecorder is the mock recorder for MockFloatSliceCmdIFace.
type MockFloatSliceCmdIFaceMockRecorder struct {
	mock *MockFloatSliceCmdIFace
}

// NewMockFloatSliceCmdIFace creates a new mock instance.
func NewMockFloatSliceCmdIFace(ctrl *gomock.Controller) *MockFloatSliceCmdIFace {
	mock := &MockFloatSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockFloatSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFloatSliceCmdIFace) EXPECT() *MockFloatSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockFloatSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockFloatSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockFloatSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockFloatSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockFloatSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockFloatSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockFloatSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFloatSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockFloatSliceCmdIFace) Result() ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockFloatSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockFloatSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockFloatSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockFloatSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockFloatSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockFloatSliceCmdIFace) Val() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockFloatSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockFloatSliceCmdIFace)(nil).Val))
}

// MockGeoLocationCmdIFace is a mock of GeoLocationCmdIFace interface.
type MockGeoLocationCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockGeoLocationCmdIFaceMockRecorder
}

// MockGeoLocationCmdIFaceMockRecorder is the mock recorder for MockGeoLocationCmdIFace.
type MockGeoLocationCmdIFaceMockRecorder struct {
	mock *MockGeoLocationCmdIFace
}

// NewMockGeoLocationCmdIFace creates a new mock instance.
func NewMockGeoLocationCmdIFace(ctrl *gomock.Controller) *MockGeoLocationCmdIFace {
	mock := &MockGeoLocationCmdIFace{ctrl: ctrl}
	mock.recorder = &MockGeoLocationCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoLocationCmdIFace) EXPECT() *MockGeoLocationCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockGeoLocationCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockGeoLocationCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockGeoLocationCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockGeoLocationCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockGeoLocationCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockGeoLocationCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockGeoLocationCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockGeoLocationCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockGeoLocationCmdIFace) Result() ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockGeoLocationCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockGeoLocationCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockGeoLocationCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockGeoLocationCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockGeoLocationCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockGeoLocationCmdIFace) Val() []redis.GeoLocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.GeoLocation)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockGeoLocationCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockGeoLocationCmdIFace)(nil).Val))
}

// MockGeoPosCmdIFace is a mock of GeoPosCmdIFace interface.
type MockGeoPosCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockGeoPosCmdIFaceMockRecorder
}

// MockGeoPosCmdIFaceMockRecorder is the mock recorder for MockGeoPosCmdIFace.
type MockGeoPosCmdIFaceMockRecorder struct {
	mock *MockGeoPosCmdIFace
}

// NewMockGeoPosCmdIFace creates a new mock instance.
func NewMockGeoPosCmdIFace(ctrl *gomock.Controller) *MockGeoPosCmdIFace {
	mock := &MockGeoPosCmdIFace{ctrl: ctrl}
	mock.recorder = &MockGeoPosCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoPosCmdIFace) EXPECT() *MockGeoPosCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockGeoPosCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockGeoPosCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockGeoPosCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockGeoPosCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockGeoPosCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockGeoPosCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockGeoPosCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockGeoPosCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockGeoPosCmdIFace) Result() ([]*redis.GeoPos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]*redis.GeoPos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockGeoPosCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockGeoPosCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockGeoPosCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockGeoPosCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockGeoPosCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockGeoPosCmdIFace) Val() []*redis.GeoPos {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]*redis.GeoPos)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockGeoPosCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockGeoPosCmdIFace)(nil).Val))
}

// MockGeoSearchLocationCmdIFace is a mock of GeoSearchLocationCmdIFace interface.
type MockGeoSearchLocationCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockGeoSearchLocationCmdIFaceMockRecorder
}

// MockGeoSearchLocationCmdIFaceMockRecorder is the mock recorder for MockGeoSearchLocationCmdIFace.
type MockGeoSearchLocationCmdIFaceMockRecorder struct {
	mock *MockGeoSearchLocationCmdIFace
}

// NewMockGeoSearchLocationCmdIFace creates a new mock instance.
func NewMockGeoSearchLocationCmdIFace(ctrl *gomock.Controller) *MockGeoSearchLocationCmdIFace {
	mock := &MockGeoSearchLocationCmdIFace{ctrl: ctrl}
	mock.recorder = &MockGeoSearchLocationCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoSearchLocationCmdIFace) EXPECT() *MockGeoSearchLocationCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockGeoSearchLocationCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockGeoSearchLocationCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockGeoSearchLocationCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockGeoSearchLocationCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockGeoSearchLocationCmdIFace) Result() ([]redis.GeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.GeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockGeoSearchLocationCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockGeoSearchLocationCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockGeoSearchLocationCmdIFace) Val() []redis.GeoLocation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.GeoLocation)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockGeoSearchLocationCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockGeoSearchLocationCmdIFace)(nil).Val))
}

// MockIntCmdIFace is a mock of IntCmdIFace interface.
type MockIntCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockIntCmdIFaceMockRecorder
}

// MockIntCmdIFaceMockRecorder is the mock recorder for MockIntCmdIFace.
type MockIntCmdIFaceMockRecorder struct {
	mock *MockIntCmdIFace
}

// NewMockIntCmdIFace creates a new mock instance.
func NewMockIntCmdIFace(ctrl *gomock.Controller) *MockIntCmdIFace {
	mock := &MockIntCmdIFace{ctrl: ctrl}
	mock.recorder = &MockIntCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntCmdIFace) EXPECT() *MockIntCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockIntCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockIntCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockIntCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockIntCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIntCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIntCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockIntCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockIntCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockIntCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockIntCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIntCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIntCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockIntCmdIFace) Result() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockIntCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockIntCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockIntCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockIntCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockIntCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockIntCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIntCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIntCmdIFace)(nil).String))
}

// Uint64 mocks base method.
func (m *MockIntCmdIFace) Uint64() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uint64 indicates an expected call of Uint64.
func (mr *MockIntCmdIFaceMockRecorder) Uint64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint64", reflect.TypeOf((*MockIntCmdIFace)(nil).Uint64))
}

// Val mocks base method.
func (m *MockIntCmdIFace) Val() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockIntCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockIntCmdIFace)(nil).Val))
}

// MockIntSliceCmdIFace is a mock of IntSliceCmdIFace interface.
type MockIntSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockIntSliceCmdIFaceMockRecorder
}

// MockIntSliceCmdIFaceMockRecorder is the mock recorder for MockIntSliceCmdIFace.
type MockIntSliceCmdIFaceMockRecorder struct {
	mock *MockIntSliceCmdIFace
}

// NewMockIntSliceCmdIFace creates a new mock instance.
func NewMockIntSliceCmdIFace(ctrl *gomock.Controller) *MockIntSliceCmdIFace {
	mock := &MockIntSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockIntSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntSliceCmdIFace) EXPECT() *MockIntSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockIntSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockIntSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockIntSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIntSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockIntSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockIntSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockIntSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIntSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockIntSliceCmdIFace) Result() ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockIntSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockIntSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockIntSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockIntSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIntSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockIntSliceCmdIFace) Val() []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]int64)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockIntSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockIntSliceCmdIFace)(nil).Val))
}

// MockScanCmdIFace is a mock of ScanCmdIFace interface.
type MockScanCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockScanCmdIFaceMockRecorder
}

// MockScanCmdIFaceMockRecorder is the mock recorder for MockScanCmdIFace.
type MockScanCmdIFaceMockRecorder struct {
	mock *MockScanCmdIFace
}

// NewMockScanCmdIFace creates a new mock instance.
func NewMockScanCmdIFace(ctrl *gomock.Controller) *MockScanCmdIFace {
	mock := &MockScanCmdIFace{ctrl: ctrl}
	mock.recorder = &MockScanCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanCmdIFace) EXPECT() *MockScanCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockScanCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockScanCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockScanCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockScanCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockScanCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockScanCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockScanCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockScanCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockScanCmdIFace)(nil).FullName))
}

// Iterator mocks base method.
func (m *MockScanCmdIFace) Iterator() *redis.ScanIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterator")
	ret0, _ := ret[0].(*redis.ScanIterator)
	return ret0
}

// Iterator indicates an expected call of Iterator.
func (mr *MockScanCmdIFaceMockRecorder) Iterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockScanCmdIFace)(nil).Iterator))
}

// Name mocks base method.
func (m *MockScanCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockScanCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockScanCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockScanCmdIFace) Result() ([]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Result indicates an expected call of Result.
func (mr *MockScanCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockScanCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockScanCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockScanCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockScanCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockScanCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockScanCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockScanCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockScanCmdIFace) Val() ([]string, uint64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(uint64)
	return ret0, ret1
}

// Val indicates an expected call of Val.
func (mr *MockScanCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockScanCmdIFace)(nil).Val))
}

// MockSliceCmdIFace is a mock of SliceCmdIFace interface.
type MockSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockSliceCmdIFaceMockRecorder
}

// MockSliceCmdIFaceMockRecorder is the mock recorder for MockSliceCmdIFace.
type MockSliceCmdIFaceMockRecorder struct {
	mock *MockSliceCmdIFace
}

// NewMockSliceCmdIFace creates a new mock instance.
func NewMockSliceCmdIFace(ctrl *gomock.Controller) *MockSliceCmdIFace {
	mock := &MockSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSliceCmdIFace) EXPECT() *MockSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockSliceCmdIFace) Result() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockSliceCmdIFace)(nil).Result))
}

// Scan mocks base method.
func (m *MockSliceCmdIFace) Scan(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockSliceCmdIFaceMockRecorder) Scan(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockSliceCmdIFace)(nil).Scan), dst)
}

// SetErr mocks base method.
func (m *MockSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockSliceCmdIFace) Val() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockSliceCmdIFace)(nil).Val))
}

// MockSlowLogCmdIFace is a mock of SlowLogCmdIFace interface.
type MockSlowLogCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockSlowLogCmdIFaceMockRecorder
}

// MockSlowLogCmdIFaceMockRecorder is the mock recorder for MockSlowLogCmdIFace.
type MockSlowLogCmdIFaceMockRecorder struct {
	mock *MockSlowLogCmdIFace
}

// NewMockSlowLogCmdIFace creates a new mock instance.
func NewMockSlowLogCmdIFace(ctrl *gomock.Controller) *MockSlowLogCmdIFace {
	mock := &MockSlowLogCmdIFace{ctrl: ctrl}
	mock.recorder = &MockSlowLogCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlowLogCmdIFace) EXPECT() *MockSlowLogCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockSlowLogCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockSlowLogCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockSlowLogCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSlowLogCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockSlowLogCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockSlowLogCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockSlowLogCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSlowLogCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockSlowLogCmdIFace) Result() ([]redis.SlowLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.SlowLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockSlowLogCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockSlowLogCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockSlowLogCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockSlowLogCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSlowLogCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockSlowLogCmdIFace) Val() []redis.SlowLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.SlowLog)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockSlowLogCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockSlowLogCmdIFace)(nil).Val))
}

// MockStatusCmdIFace is a mock of StatusCmdIFace interface.
type MockStatusCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStatusCmdIFaceMockRecorder
}

// MockStatusCmdIFaceMockRecorder is the mock recorder for MockStatusCmdIFace.
type MockStatusCmdIFaceMockRecorder struct {
	mock *MockStatusCmdIFace
}

// NewMockStatusCmdIFace creates a new mock instance.
func NewMockStatusCmdIFace(ctrl *gomock.Controller) *MockStatusCmdIFace {
	mock := &MockStatusCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStatusCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusCmdIFace) EXPECT() *MockStatusCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStatusCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStatusCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStatusCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockStatusCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStatusCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStatusCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockStatusCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStatusCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStatusCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockStatusCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStatusCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStatusCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStatusCmdIFace) Result() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStatusCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStatusCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockStatusCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStatusCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStatusCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStatusCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStatusCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStatusCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockStatusCmdIFace) Val() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(string)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStatusCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStatusCmdIFace)(nil).Val))
}

// MockStringCmdIFace is a mock of StringCmdIFace interface.
type MockStringCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStringCmdIFaceMockRecorder
}

// MockStringCmdIFaceMockRecorder is the mock recorder for MockStringCmdIFace.
type MockStringCmdIFaceMockRecorder struct {
	mock *MockStringCmdIFace
}

// NewMockStringCmdIFace creates a new mock instance.
func NewMockStringCmdIFace(ctrl *gomock.Controller) *MockStringCmdIFace {
	mock := &MockStringCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStringCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringCmdIFace) EXPECT() *MockStringCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStringCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStringCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStringCmdIFace)(nil).Args))
}

// Bool mocks base method.
func (m *MockStringCmdIFace) Bool() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bool")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bool indicates an expected call of Bool.
func (mr *MockStringCmdIFaceMockRecorder) Bool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bool", reflect.TypeOf((*MockStringCmdIFace)(nil).Bool))
}

// Bytes mocks base method.
func (m *MockStringCmdIFace) Bytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bytes indicates an expected call of Bytes.
func (mr *MockStringCmdIFaceMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockStringCmdIFace)(nil).Bytes))
}

// Err mocks base method.
func (m *MockStringCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStringCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStringCmdIFace)(nil).Err))
}

// Float32 mocks base method.
func (m *MockStringCmdIFace) Float32() (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float32")
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float32 indicates an expected call of Float32.
func (mr *MockStringCmdIFaceMockRecorder) Float32() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float32", reflect.TypeOf((*MockStringCmdIFace)(nil).Float32))
}

// Float64 mocks base method.
func (m *MockStringCmdIFace) Float64() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Float64")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Float64 indicates an expected call of Float64.
func (mr *MockStringCmdIFaceMockRecorder) Float64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float64", reflect.TypeOf((*MockStringCmdIFace)(nil).Float64))
}

// FullName mocks base method.
func (m *MockStringCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStringCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStringCmdIFace)(nil).FullName))
}

// Int mocks base method.
func (m *MockStringCmdIFace) Int() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int indicates an expected call of Int.
func (mr *MockStringCmdIFaceMockRecorder) Int() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockStringCmdIFace)(nil).Int))
}

// Int64 mocks base method.
func (m *MockStringCmdIFace) Int64() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Int64 indicates an expected call of Int64.
func (mr *MockStringCmdIFaceMockRecorder) Int64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockStringCmdIFace)(nil).Int64))
}

// Name mocks base method.
func (m *MockStringCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStringCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStringCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStringCmdIFace) Result() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStringCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStringCmdIFace)(nil).Result))
}

// Scan mocks base method.
func (m *MockStringCmdIFace) Scan(val interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockStringCmdIFaceMockRecorder) Scan(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockStringCmdIFace)(nil).Scan), val)
}

// SetErr mocks base method.
func (m *MockStringCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStringCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStringCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStringCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringCmdIFace)(nil).String))
}

// Time mocks base method.
func (m *MockStringCmdIFace) Time() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Time indicates an expected call of Time.
func (mr *MockStringCmdIFaceMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockStringCmdIFace)(nil).Time))
}

// Uint64 mocks base method.
func (m *MockStringCmdIFace) Uint64() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uint64")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uint64 indicates an expected call of Uint64.
func (mr *MockStringCmdIFaceMockRecorder) Uint64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint64", reflect.TypeOf((*MockStringCmdIFace)(nil).Uint64))
}

// Val mocks base method.
func (m *MockStringCmdIFace) Val() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(string)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStringCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStringCmdIFace)(nil).Val))
}

// MockStringIntMapCmdIFace is a mock of StringIntMapCmdIFace interface.
type MockStringIntMapCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStringIntMapCmdIFaceMockRecorder
}

// MockStringIntMapCmdIFaceMockRecorder is the mock recorder for MockStringIntMapCmdIFace.
type MockStringIntMapCmdIFaceMockRecorder struct {
	mock *MockStringIntMapCmdIFace
}

// NewMockStringIntMapCmdIFace creates a new mock instance.
func NewMockStringIntMapCmdIFace(ctrl *gomock.Controller) *MockStringIntMapCmdIFace {
	mock := &MockStringIntMapCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStringIntMapCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringIntMapCmdIFace) EXPECT() *MockStringIntMapCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStringIntMapCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStringIntMapCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockStringIntMapCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStringIntMapCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockStringIntMapCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStringIntMapCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockStringIntMapCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStringIntMapCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStringIntMapCmdIFace) Result() (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStringIntMapCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockStringIntMapCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStringIntMapCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStringIntMapCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringIntMapCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockStringIntMapCmdIFace) Val() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStringIntMapCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStringIntMapCmdIFace)(nil).Val))
}

// MockStringSliceCmdIFace is a mock of StringSliceCmdIFace interface.
type MockStringSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStringSliceCmdIFaceMockRecorder
}

// MockStringSliceCmdIFaceMockRecorder is the mock recorder for MockStringSliceCmdIFace.
type MockStringSliceCmdIFaceMockRecorder struct {
	mock *MockStringSliceCmdIFace
}

// NewMockStringSliceCmdIFace creates a new mock instance.
func NewMockStringSliceCmdIFace(ctrl *gomock.Controller) *MockStringSliceCmdIFace {
	mock := &MockStringSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStringSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringSliceCmdIFace) EXPECT() *MockStringSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStringSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStringSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockStringSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStringSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockStringSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStringSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockStringSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStringSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStringSliceCmdIFace) Result() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStringSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).Result))
}

// ScanSlice mocks base method.
func (m *MockStringSliceCmdIFace) ScanSlice(container interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanSlice", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanSlice indicates an expected call of ScanSlice.
func (mr *MockStringSliceCmdIFaceMockRecorder) ScanSlice(container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanSlice", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).ScanSlice), container)
}

// SetErr mocks base method.
func (m *MockStringSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStringSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStringSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockStringSliceCmdIFace) Val() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStringSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStringSliceCmdIFace)(nil).Val))
}

// MockStringStringMapCmdIFace is a mock of StringStringMapCmdIFace interface.
type MockStringStringMapCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStringStringMapCmdIFaceMockRecorder
}

// MockStringStringMapCmdIFaceMockRecorder is the mock recorder for MockStringStringMapCmdIFace.
type MockStringStringMapCmdIFaceMockRecorder struct {
	mock *MockStringStringMapCmdIFace
}

// NewMockStringStringMapCmdIFace creates a new mock instance.
func NewMockStringStringMapCmdIFace(ctrl *gomock.Controller) *MockStringStringMapCmdIFace {
	mock := &MockStringStringMapCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStringStringMapCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringStringMapCmdIFace) EXPECT() *MockStringStringMapCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStringStringMapCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockStringStringMapCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockStringStringMapCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStringStringMapCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockStringStringMapCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStringStringMapCmdIFace) Result() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Result))
}

// Scan mocks base method.
func (m *MockStringStringMapCmdIFace) Scan(dst interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Scan(dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Scan), dst)
}

// SetErr mocks base method.
func (m *MockStringStringMapCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStringStringMapCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStringStringMapCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringStringMapCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockStringStringMapCmdIFace) Val() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStringStringMapCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStringStringMapCmdIFace)(nil).Val))
}

// MockStringStructMapCmdIFace is a mock of StringStructMapCmdIFace interface.
type MockStringStructMapCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockStringStructMapCmdIFaceMockRecorder
}

// MockStringStructMapCmdIFaceMockRecorder is the mock recorder for MockStringStructMapCmdIFace.
type MockStringStructMapCmdIFaceMockRecorder struct {
	mock *MockStringStructMapCmdIFace
}

// NewMockStringStructMapCmdIFace creates a new mock instance.
func NewMockStringStructMapCmdIFace(ctrl *gomock.Controller) *MockStringStructMapCmdIFace {
	mock := &MockStringStructMapCmdIFace{ctrl: ctrl}
	mock.recorder = &MockStringStructMapCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStringStructMapCmdIFace) EXPECT() *MockStringStructMapCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockStringStructMapCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockStringStructMapCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockStringStructMapCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockStringStructMapCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockStringStructMapCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockStringStructMapCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockStringStructMapCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStringStructMapCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockStringStructMapCmdIFace) Result() (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockStringStructMapCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockStringStructMapCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockStringStructMapCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockStringStructMapCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockStringStructMapCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockStringStructMapCmdIFace) Val() map[string]struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(map[string]struct{})
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockStringStructMapCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockStringStructMapCmdIFace)(nil).Val))
}

// MockTimeCmdIFace is a mock of TimeCmdIFace interface.
type MockTimeCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockTimeCmdIFaceMockRecorder
}

// MockTimeCmdIFaceMockRecorder is the mock recorder for MockTimeCmdIFace.
type MockTimeCmdIFaceMockRecorder struct {
	mock *MockTimeCmdIFace
}

// NewMockTimeCmdIFace creates a new mock instance.
func NewMockTimeCmdIFace(ctrl *gomock.Controller) *MockTimeCmdIFace {
	mock := &MockTimeCmdIFace{ctrl: ctrl}
	mock.recorder = &MockTimeCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeCmdIFace) EXPECT() *MockTimeCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockTimeCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockTimeCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockTimeCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockTimeCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockTimeCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockTimeCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockTimeCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockTimeCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockTimeCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockTimeCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTimeCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTimeCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockTimeCmdIFace) Result() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockTimeCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockTimeCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockTimeCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockTimeCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockTimeCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockTimeCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockTimeCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockTimeCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockTimeCmdIFace) Val() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockTimeCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockTimeCmdIFace)(nil).Val))
}

// MockXAutoClaimCmdIFace is a mock of XAutoClaimCmdIFace interface.
type MockXAutoClaimCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXAutoClaimCmdIFaceMockRecorder
}

// MockXAutoClaimCmdIFaceMockRecorder is the mock recorder for MockXAutoClaimCmdIFace.
type MockXAutoClaimCmdIFaceMockRecorder struct {
	mock *MockXAutoClaimCmdIFace
}

// NewMockXAutoClaimCmdIFace creates a new mock instance.
func NewMockXAutoClaimCmdIFace(ctrl *gomock.Controller) *MockXAutoClaimCmdIFace {
	mock := &MockXAutoClaimCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXAutoClaimCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXAutoClaimCmdIFace) EXPECT() *MockXAutoClaimCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXAutoClaimCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXAutoClaimCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXAutoClaimCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXAutoClaimCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXAutoClaimCmdIFace) Result() ([]redis.XMessage, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Result indicates an expected call of Result.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXAutoClaimCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXAutoClaimCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXAutoClaimCmdIFace) Val() ([]redis.XMessage, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Val indicates an expected call of Val.
func (mr *MockXAutoClaimCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXAutoClaimCmdIFace)(nil).Val))
}

// MockXAutoClaimJustIDCmdIFace is a mock of XAutoClaimJustIDCmdIFace interface.
type MockXAutoClaimJustIDCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXAutoClaimJustIDCmdIFaceMockRecorder
}

// MockXAutoClaimJustIDCmdIFaceMockRecorder is the mock recorder for MockXAutoClaimJustIDCmdIFace.
type MockXAutoClaimJustIDCmdIFaceMockRecorder struct {
	mock *MockXAutoClaimJustIDCmdIFace
}

// NewMockXAutoClaimJustIDCmdIFace creates a new mock instance.
func NewMockXAutoClaimJustIDCmdIFace(ctrl *gomock.Controller) *MockXAutoClaimJustIDCmdIFace {
	mock := &MockXAutoClaimJustIDCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXAutoClaimJustIDCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXAutoClaimJustIDCmdIFace) EXPECT() *MockXAutoClaimJustIDCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) Result() ([]string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Result indicates an expected call of Result.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXAutoClaimJustIDCmdIFace) Val() ([]string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// Val indicates an expected call of Val.
func (mr *MockXAutoClaimJustIDCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXAutoClaimJustIDCmdIFace)(nil).Val))
}

// MockXInfoConsumersCmdIFace is a mock of XInfoConsumersCmdIFace interface.
type MockXInfoConsumersCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXInfoConsumersCmdIFaceMockRecorder
}

// MockXInfoConsumersCmdIFaceMockRecorder is the mock recorder for MockXInfoConsumersCmdIFace.
type MockXInfoConsumersCmdIFaceMockRecorder struct {
	mock *MockXInfoConsumersCmdIFace
}

// NewMockXInfoConsumersCmdIFace creates a new mock instance.
func NewMockXInfoConsumersCmdIFace(ctrl *gomock.Controller) *MockXInfoConsumersCmdIFace {
	mock := &MockXInfoConsumersCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXInfoConsumersCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXInfoConsumersCmdIFace) EXPECT() *MockXInfoConsumersCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXInfoConsumersCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXInfoConsumersCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXInfoConsumersCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXInfoConsumersCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXInfoConsumersCmdIFace) Result() ([]redis.XInfoConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XInfoConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXInfoConsumersCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXInfoConsumersCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXInfoConsumersCmdIFace) Val() []redis.XInfoConsumer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XInfoConsumer)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXInfoConsumersCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXInfoConsumersCmdIFace)(nil).Val))
}

// MockXInfoGroupsCmdIFace is a mock of XInfoGroupsCmdIFace interface.
type MockXInfoGroupsCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXInfoGroupsCmdIFaceMockRecorder
}

// MockXInfoGroupsCmdIFaceMockRecorder is the mock recorder for MockXInfoGroupsCmdIFace.
type MockXInfoGroupsCmdIFaceMockRecorder struct {
	mock *MockXInfoGroupsCmdIFace
}

// NewMockXInfoGroupsCmdIFace creates a new mock instance.
func NewMockXInfoGroupsCmdIFace(ctrl *gomock.Controller) *MockXInfoGroupsCmdIFace {
	mock := &MockXInfoGroupsCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXInfoGroupsCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXInfoGroupsCmdIFace) EXPECT() *MockXInfoGroupsCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXInfoGroupsCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXInfoGroupsCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXInfoGroupsCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXInfoGroupsCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXInfoGroupsCmdIFace) Result() ([]redis.XInfoGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XInfoGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXInfoGroupsCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXInfoGroupsCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXInfoGroupsCmdIFace) Val() []redis.XInfoGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XInfoGroup)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXInfoGroupsCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXInfoGroupsCmdIFace)(nil).Val))
}

// MockXInfoStreamCmdIFace is a mock of XInfoStreamCmdIFace interface.
type MockXInfoStreamCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXInfoStreamCmdIFaceMockRecorder
}

// MockXInfoStreamCmdIFaceMockRecorder is the mock recorder for MockXInfoStreamCmdIFace.
type MockXInfoStreamCmdIFaceMockRecorder struct {
	mock *MockXInfoStreamCmdIFace
}

// NewMockXInfoStreamCmdIFace creates a new mock instance.
func NewMockXInfoStreamCmdIFace(ctrl *gomock.Controller) *MockXInfoStreamCmdIFace {
	mock := &MockXInfoStreamCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXInfoStreamCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXInfoStreamCmdIFace) EXPECT() *MockXInfoStreamCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXInfoStreamCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXInfoStreamCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXInfoStreamCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXInfoStreamCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXInfoStreamCmdIFace) Result() (*redis.XInfoStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(*redis.XInfoStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXInfoStreamCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXInfoStreamCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXInfoStreamCmdIFace) Val() *redis.XInfoStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(*redis.XInfoStream)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXInfoStreamCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXInfoStreamCmdIFace)(nil).Val))
}

// MockXInfoStreamFullCmdIFace is a mock of XInfoStreamFullCmdIFace interface.
type MockXInfoStreamFullCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXInfoStreamFullCmdIFaceMockRecorder
}

// MockXInfoStreamFullCmdIFaceMockRecorder is the mock recorder for MockXInfoStreamFullCmdIFace.
type MockXInfoStreamFullCmdIFaceMockRecorder struct {
	mock *MockXInfoStreamFullCmdIFace
}

// NewMockXInfoStreamFullCmdIFace creates a new mock instance.
func NewMockXInfoStreamFullCmdIFace(ctrl *gomock.Controller) *MockXInfoStreamFullCmdIFace {
	mock := &MockXInfoStreamFullCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXInfoStreamFullCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXInfoStreamFullCmdIFace) EXPECT() *MockXInfoStreamFullCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXInfoStreamFullCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXInfoStreamFullCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXInfoStreamFullCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXInfoStreamFullCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXInfoStreamFullCmdIFace) Result() (*redis.XInfoStreamFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(*redis.XInfoStreamFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXInfoStreamFullCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXInfoStreamFullCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXInfoStreamFullCmdIFace) Val() *redis.XInfoStreamFull {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(*redis.XInfoStreamFull)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXInfoStreamFullCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXInfoStreamFullCmdIFace)(nil).Val))
}

// MockXMessageSliceCmdIFace is a mock of XMessageSliceCmdIFace interface.
type MockXMessageSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXMessageSliceCmdIFaceMockRecorder
}

// MockXMessageSliceCmdIFaceMockRecorder is the mock recorder for MockXMessageSliceCmdIFace.
type MockXMessageSliceCmdIFaceMockRecorder struct {
	mock *MockXMessageSliceCmdIFace
}

// NewMockXMessageSliceCmdIFace creates a new mock instance.
func NewMockXMessageSliceCmdIFace(ctrl *gomock.Controller) *MockXMessageSliceCmdIFace {
	mock := &MockXMessageSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXMessageSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXMessageSliceCmdIFace) EXPECT() *MockXMessageSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXMessageSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXMessageSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXMessageSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXMessageSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXMessageSliceCmdIFace) Result() ([]redis.XMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXMessageSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXMessageSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXMessageSliceCmdIFace) Val() []redis.XMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XMessage)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXMessageSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXMessageSliceCmdIFace)(nil).Val))
}

// MockXPendingCmdIFace is a mock of XPendingCmdIFace interface.
type MockXPendingCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXPendingCmdIFaceMockRecorder
}

// MockXPendingCmdIFaceMockRecorder is the mock recorder for MockXPendingCmdIFace.
type MockXPendingCmdIFaceMockRecorder struct {
	mock *MockXPendingCmdIFace
}

// NewMockXPendingCmdIFace creates a new mock instance.
func NewMockXPendingCmdIFace(ctrl *gomock.Controller) *MockXPendingCmdIFace {
	mock := &MockXPendingCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXPendingCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXPendingCmdIFace) EXPECT() *MockXPendingCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXPendingCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXPendingCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXPendingCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXPendingCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXPendingCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXPendingCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXPendingCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXPendingCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXPendingCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXPendingCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXPendingCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXPendingCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXPendingCmdIFace) Result() (*redis.XPending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(*redis.XPending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXPendingCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXPendingCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXPendingCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXPendingCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXPendingCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXPendingCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXPendingCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXPendingCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXPendingCmdIFace) Val() *redis.XPending {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(*redis.XPending)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXPendingCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXPendingCmdIFace)(nil).Val))
}

// MockXPendingExtCmdIFace is a mock of XPendingExtCmdIFace interface.
type MockXPendingExtCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXPendingExtCmdIFaceMockRecorder
}

// MockXPendingExtCmdIFaceMockRecorder is the mock recorder for MockXPendingExtCmdIFace.
type MockXPendingExtCmdIFaceMockRecorder struct {
	mock *MockXPendingExtCmdIFace
}

// NewMockXPendingExtCmdIFace creates a new mock instance.
func NewMockXPendingExtCmdIFace(ctrl *gomock.Controller) *MockXPendingExtCmdIFace {
	mock := &MockXPendingExtCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXPendingExtCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXPendingExtCmdIFace) EXPECT() *MockXPendingExtCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXPendingExtCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXPendingExtCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXPendingExtCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXPendingExtCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXPendingExtCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXPendingExtCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXPendingExtCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXPendingExtCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXPendingExtCmdIFace) Result() ([]redis.XPendingExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XPendingExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXPendingExtCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXPendingExtCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXPendingExtCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXPendingExtCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXPendingExtCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXPendingExtCmdIFace) Val() []redis.XPendingExt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XPendingExt)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXPendingExtCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXPendingExtCmdIFace)(nil).Val))
}

// MockXStreamSliceCmdIFace is a mock of XStreamSliceCmdIFace interface.
type MockXStreamSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockXStreamSliceCmdIFaceMockRecorder
}

// MockXStreamSliceCmdIFaceMockRecorder is the mock recorder for MockXStreamSliceCmdIFace.
type MockXStreamSliceCmdIFaceMockRecorder struct {
	mock *MockXStreamSliceCmdIFace
}

// NewMockXStreamSliceCmdIFace creates a new mock instance.
func NewMockXStreamSliceCmdIFace(ctrl *gomock.Controller) *MockXStreamSliceCmdIFace {
	mock := &MockXStreamSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockXStreamSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXStreamSliceCmdIFace) EXPECT() *MockXStreamSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockXStreamSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockXStreamSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockXStreamSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockXStreamSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockXStreamSliceCmdIFace) Result() ([]redis.XStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.XStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockXStreamSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockXStreamSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockXStreamSliceCmdIFace) Val() []redis.XStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.XStream)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockXStreamSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockXStreamSliceCmdIFace)(nil).Val))
}

// MockZSliceCmdIFace is a mock of ZSliceCmdIFace interface.
type MockZSliceCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockZSliceCmdIFaceMockRecorder
}

// MockZSliceCmdIFaceMockRecorder is the mock recorder for MockZSliceCmdIFace.
type MockZSliceCmdIFaceMockRecorder struct {
	mock *MockZSliceCmdIFace
}

// NewMockZSliceCmdIFace creates a new mock instance.
func NewMockZSliceCmdIFace(ctrl *gomock.Controller) *MockZSliceCmdIFace {
	mock := &MockZSliceCmdIFace{ctrl: ctrl}
	mock.recorder = &MockZSliceCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZSliceCmdIFace) EXPECT() *MockZSliceCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockZSliceCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockZSliceCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockZSliceCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockZSliceCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockZSliceCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockZSliceCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockZSliceCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockZSliceCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockZSliceCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockZSliceCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockZSliceCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockZSliceCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockZSliceCmdIFace) Result() ([]redis.Z, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].([]redis.Z)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockZSliceCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockZSliceCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockZSliceCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockZSliceCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockZSliceCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockZSliceCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockZSliceCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockZSliceCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockZSliceCmdIFace) Val() []redis.Z {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].([]redis.Z)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockZSliceCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockZSliceCmdIFace)(nil).Val))
}

// MockZWithKeyCmdIFace is a mock of ZWithKeyCmdIFace interface.
type MockZWithKeyCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockZWithKeyCmdIFaceMockRecorder
}

// MockZWithKeyCmdIFaceMockRecorder is the mock recorder for MockZWithKeyCmdIFace.
type MockZWithKeyCmdIFaceMockRecorder struct {
	mock *MockZWithKeyCmdIFace
}

// NewMockZWithKeyCmdIFace creates a new mock instance.
func NewMockZWithKeyCmdIFace(ctrl *gomock.Controller) *MockZWithKeyCmdIFace {
	mock := &MockZWithKeyCmdIFace{ctrl: ctrl}
	mock.recorder = &MockZWithKeyCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZWithKeyCmdIFace) EXPECT() *MockZWithKeyCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockZWithKeyCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockZWithKeyCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockZWithKeyCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockZWithKeyCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockZWithKeyCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockZWithKeyCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockZWithKeyCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockZWithKeyCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).Name))
}

// Result mocks base method.
func (m *MockZWithKeyCmdIFace) Result() (*redis.ZWithKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(*redis.ZWithKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockZWithKeyCmdIFaceMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).Result))
}

// SetErr mocks base method.
func (m *MockZWithKeyCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockZWithKeyCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).SetErr), e)
}

// String mocks base method.
func (m *MockZWithKeyCmdIFace) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockZWithKeyCmdIFaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).String))
}

// Val mocks base method.
func (m *MockZWithKeyCmdIFace) Val() *redis.ZWithKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Val")
	ret0, _ := ret[0].(*redis.ZWithKey)
	return ret0
}

// Val indicates an expected call of Val.
func (mr *MockZWithKeyCmdIFaceMockRecorder) Val() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Val", reflect.TypeOf((*MockZWithKeyCmdIFace)(nil).Val))
}

// MockbaseCmdIFace is a mock of baseCmdIFace interface.
type MockbaseCmdIFace struct {
	ctrl     *gomock.Controller
	recorder *MockbaseCmdIFaceMockRecorder
}

// MockbaseCmdIFaceMockRecorder is the mock recorder for MockbaseCmdIFace.
type MockbaseCmdIFaceMockRecorder struct {
	mock *MockbaseCmdIFace
}

// NewMockbaseCmdIFace creates a new mock instance.
func NewMockbaseCmdIFace(ctrl *gomock.Controller) *MockbaseCmdIFace {
	mock := &MockbaseCmdIFace{ctrl: ctrl}
	mock.recorder = &MockbaseCmdIFaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbaseCmdIFace) EXPECT() *MockbaseCmdIFaceMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockbaseCmdIFace) Args() []interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockbaseCmdIFaceMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockbaseCmdIFace)(nil).Args))
}

// Err mocks base method.
func (m *MockbaseCmdIFace) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockbaseCmdIFaceMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockbaseCmdIFace)(nil).Err))
}

// FullName mocks base method.
func (m *MockbaseCmdIFace) FullName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FullName indicates an expected call of FullName.
func (mr *MockbaseCmdIFaceMockRecorder) FullName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullName", reflect.TypeOf((*MockbaseCmdIFace)(nil).FullName))
}

// Name mocks base method.
func (m *MockbaseCmdIFace) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockbaseCmdIFaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockbaseCmdIFace)(nil).Name))
}

// SetErr mocks base method.
func (m *MockbaseCmdIFace) SetErr(e error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", e)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockbaseCmdIFaceMockRecorder) SetErr(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockbaseCmdIFace)(nil).SetErr), e)
}
