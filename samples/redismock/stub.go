// Code generated by "gogen imake"; DO NOT EDIT.
// Exec: "gogen imake github.com/go-redis/redis/v8 --to redismock -m .*Cmd$ -o samples/redismock/redis.go --mock"
// Version: 0.0.1
// mockgen: v1.6.0

package redismock

import (
	"reflect"
	"time"

	"bou.ke/monkey"
	redis "github.com/go-redis/redis/v8"
	"github.com/golang/mock/gomock"
)

// StubBoolCmdMock stub struct BoolCmd
func StubBoolCmdMock(ctl *gomock.Controller) (mock *MockBoolCmdIFace, st *redis.BoolCmd) {
	mock = NewMockBoolCmdIFace(ctl)
	st = &redis.BoolCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.BoolCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.BoolCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.BoolCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.BoolCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.BoolCmd) (bool, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.BoolCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.BoolCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.BoolCmd) bool {
			return mock.Val()
		},
	)

	return
}

// StubBoolSliceCmdMock stub struct BoolSliceCmd
func StubBoolSliceCmdMock(ctl *gomock.Controller) (mock *MockBoolSliceCmdIFace, st *redis.BoolSliceCmd) {
	mock = NewMockBoolSliceCmdIFace(ctl)
	st = &redis.BoolSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.BoolSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.BoolSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.BoolSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.BoolSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.BoolSliceCmd) ([]bool, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.BoolSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.BoolSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.BoolSliceCmd) []bool {
			return mock.Val()
		},
	)

	return
}

// StubClusterSlotsCmdMock stub struct ClusterSlotsCmd
func StubClusterSlotsCmdMock(ctl *gomock.Controller) (mock *MockClusterSlotsCmdIFace, st *redis.ClusterSlotsCmd) {
	mock = NewMockClusterSlotsCmdIFace(ctl)
	st = &redis.ClusterSlotsCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.ClusterSlotsCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.ClusterSlotsCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.ClusterSlotsCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.ClusterSlotsCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.ClusterSlotsCmd) ([]redis.ClusterSlot, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.ClusterSlotsCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.ClusterSlotsCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.ClusterSlotsCmd) []redis.ClusterSlot {
			return mock.Val()
		},
	)

	return
}

// StubCmdMock stub struct Cmd
func StubCmdMock(ctl *gomock.Controller) (mock *MockCmdIFace, st *redis.Cmd) {
	mock = NewMockCmdIFace(ctl)
	st = &redis.Cmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.Cmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Bool
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Bool",
		func(_ *redis.Cmd) (bool, error) {
			return mock.Bool()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.Cmd) error {
			return mock.Err()
		},
	)
	// stub Float32
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Float32",
		func(_ *redis.Cmd) (float32, error) {
			return mock.Float32()
		},
	)
	// stub Float64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Float64",
		func(_ *redis.Cmd) (float64, error) {
			return mock.Float64()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.Cmd) string {
			return mock.FullName()
		},
	)
	// stub Int
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Int",
		func(_ *redis.Cmd) (int, error) {
			return mock.Int()
		},
	)
	// stub Int64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Int64",
		func(_ *redis.Cmd) (int64, error) {
			return mock.Int64()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.Cmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.Cmd) (interface{}, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.Cmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.Cmd) string {
			return mock.String()
		},
	)
	// stub Text
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Text",
		func(_ *redis.Cmd) (string, error) {
			return mock.Text()
		},
	)
	// stub Uint64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Uint64",
		func(_ *redis.Cmd) (uint64, error) {
			return mock.Uint64()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.Cmd) interface{} {
			return mock.Val()
		},
	)

	return
}

// StubCommandsInfoCmdMock stub struct CommandsInfoCmd
func StubCommandsInfoCmdMock(ctl *gomock.Controller) (mock *MockCommandsInfoCmdIFace, st *redis.CommandsInfoCmd) {
	mock = NewMockCommandsInfoCmdIFace(ctl)
	st = &redis.CommandsInfoCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.CommandsInfoCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.CommandsInfoCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.CommandsInfoCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.CommandsInfoCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.CommandsInfoCmd) (map[string]*redis.CommandInfo, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.CommandsInfoCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.CommandsInfoCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.CommandsInfoCmd) map[string]*redis.CommandInfo {
			return mock.Val()
		},
	)

	return
}

// StubDurationCmdMock stub struct DurationCmd
func StubDurationCmdMock(ctl *gomock.Controller) (mock *MockDurationCmdIFace, st *redis.DurationCmd) {
	mock = NewMockDurationCmdIFace(ctl)
	st = &redis.DurationCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.DurationCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.DurationCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.DurationCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.DurationCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.DurationCmd) (time.Duration, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.DurationCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.DurationCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.DurationCmd) time.Duration {
			return mock.Val()
		},
	)

	return
}

// StubFloatCmdMock stub struct FloatCmd
func StubFloatCmdMock(ctl *gomock.Controller) (mock *MockFloatCmdIFace, st *redis.FloatCmd) {
	mock = NewMockFloatCmdIFace(ctl)
	st = &redis.FloatCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.FloatCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.FloatCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.FloatCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.FloatCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.FloatCmd) (float64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.FloatCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.FloatCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.FloatCmd) float64 {
			return mock.Val()
		},
	)

	return
}

// StubFloatSliceCmdMock stub struct FloatSliceCmd
func StubFloatSliceCmdMock(ctl *gomock.Controller) (mock *MockFloatSliceCmdIFace, st *redis.FloatSliceCmd) {
	mock = NewMockFloatSliceCmdIFace(ctl)
	st = &redis.FloatSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.FloatSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.FloatSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.FloatSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.FloatSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.FloatSliceCmd) ([]float64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.FloatSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.FloatSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.FloatSliceCmd) []float64 {
			return mock.Val()
		},
	)

	return
}

// StubGeoLocationCmdMock stub struct GeoLocationCmd
func StubGeoLocationCmdMock(ctl *gomock.Controller) (mock *MockGeoLocationCmdIFace, st *redis.GeoLocationCmd) {
	mock = NewMockGeoLocationCmdIFace(ctl)
	st = &redis.GeoLocationCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.GeoLocationCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.GeoLocationCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.GeoLocationCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.GeoLocationCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.GeoLocationCmd) ([]redis.GeoLocation, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.GeoLocationCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.GeoLocationCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.GeoLocationCmd) []redis.GeoLocation {
			return mock.Val()
		},
	)

	return
}

// StubGeoPosCmdMock stub struct GeoPosCmd
func StubGeoPosCmdMock(ctl *gomock.Controller) (mock *MockGeoPosCmdIFace, st *redis.GeoPosCmd) {
	mock = NewMockGeoPosCmdIFace(ctl)
	st = &redis.GeoPosCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.GeoPosCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.GeoPosCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.GeoPosCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.GeoPosCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.GeoPosCmd) ([]*redis.GeoPos, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.GeoPosCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.GeoPosCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.GeoPosCmd) []*redis.GeoPos {
			return mock.Val()
		},
	)

	return
}

// StubGeoSearchLocationCmdMock stub struct GeoSearchLocationCmd
func StubGeoSearchLocationCmdMock(ctl *gomock.Controller) (mock *MockGeoSearchLocationCmdIFace, st *redis.GeoSearchLocationCmd) {
	mock = NewMockGeoSearchLocationCmdIFace(ctl)
	st = &redis.GeoSearchLocationCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.GeoSearchLocationCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.GeoSearchLocationCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.GeoSearchLocationCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.GeoSearchLocationCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.GeoSearchLocationCmd) ([]redis.GeoLocation, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.GeoSearchLocationCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.GeoSearchLocationCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.GeoSearchLocationCmd) []redis.GeoLocation {
			return mock.Val()
		},
	)

	return
}

// StubIntCmdMock stub struct IntCmd
func StubIntCmdMock(ctl *gomock.Controller) (mock *MockIntCmdIFace, st *redis.IntCmd) {
	mock = NewMockIntCmdIFace(ctl)
	st = &redis.IntCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.IntCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.IntCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.IntCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.IntCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.IntCmd) (int64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.IntCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.IntCmd) string {
			return mock.String()
		},
	)
	// stub Uint64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Uint64",
		func(_ *redis.IntCmd) (uint64, error) {
			return mock.Uint64()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.IntCmd) int64 {
			return mock.Val()
		},
	)

	return
}

// StubIntSliceCmdMock stub struct IntSliceCmd
func StubIntSliceCmdMock(ctl *gomock.Controller) (mock *MockIntSliceCmdIFace, st *redis.IntSliceCmd) {
	mock = NewMockIntSliceCmdIFace(ctl)
	st = &redis.IntSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.IntSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.IntSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.IntSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.IntSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.IntSliceCmd) ([]int64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.IntSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.IntSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.IntSliceCmd) []int64 {
			return mock.Val()
		},
	)

	return
}

// StubScanCmdMock stub struct ScanCmd
func StubScanCmdMock(ctl *gomock.Controller) (mock *MockScanCmdIFace, st *redis.ScanCmd) {
	mock = NewMockScanCmdIFace(ctl)
	st = &redis.ScanCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.ScanCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.ScanCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.ScanCmd) string {
			return mock.FullName()
		},
	)
	// stub Iterator
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Iterator",
		func(_ *redis.ScanCmd) *redis.ScanIterator {
			return mock.Iterator()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.ScanCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.ScanCmd) ([]string, uint64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.ScanCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.ScanCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.ScanCmd) ([]string, uint64) {
			return mock.Val()
		},
	)

	return
}

// StubSliceCmdMock stub struct SliceCmd
func StubSliceCmdMock(ctl *gomock.Controller) (mock *MockSliceCmdIFace, st *redis.SliceCmd) {
	mock = NewMockSliceCmdIFace(ctl)
	st = &redis.SliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.SliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.SliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.SliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.SliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.SliceCmd) ([]interface{}, error) {
			return mock.Result()
		},
	)
	// stub Scan
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Scan",
		func(_ *redis.SliceCmd, dst interface{}) error {
			return mock.Scan(dst)
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.SliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.SliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.SliceCmd) []interface{} {
			return mock.Val()
		},
	)

	return
}

// StubSlowLogCmdMock stub struct SlowLogCmd
func StubSlowLogCmdMock(ctl *gomock.Controller) (mock *MockSlowLogCmdIFace, st *redis.SlowLogCmd) {
	mock = NewMockSlowLogCmdIFace(ctl)
	st = &redis.SlowLogCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.SlowLogCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.SlowLogCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.SlowLogCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.SlowLogCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.SlowLogCmd) ([]redis.SlowLog, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.SlowLogCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.SlowLogCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.SlowLogCmd) []redis.SlowLog {
			return mock.Val()
		},
	)

	return
}

// StubStatusCmdMock stub struct StatusCmd
func StubStatusCmdMock(ctl *gomock.Controller) (mock *MockStatusCmdIFace, st *redis.StatusCmd) {
	mock = NewMockStatusCmdIFace(ctl)
	st = &redis.StatusCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StatusCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StatusCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StatusCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StatusCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StatusCmd) (string, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StatusCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StatusCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StatusCmd) string {
			return mock.Val()
		},
	)

	return
}

// StubStringCmdMock stub struct StringCmd
func StubStringCmdMock(ctl *gomock.Controller) (mock *MockStringCmdIFace, st *redis.StringCmd) {
	mock = NewMockStringCmdIFace(ctl)
	st = &redis.StringCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StringCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Bool
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Bool",
		func(_ *redis.StringCmd) (bool, error) {
			return mock.Bool()
		},
	)
	// stub Bytes
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Bytes",
		func(_ *redis.StringCmd) ([]byte, error) {
			return mock.Bytes()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StringCmd) error {
			return mock.Err()
		},
	)
	// stub Float32
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Float32",
		func(_ *redis.StringCmd) (float32, error) {
			return mock.Float32()
		},
	)
	// stub Float64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Float64",
		func(_ *redis.StringCmd) (float64, error) {
			return mock.Float64()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StringCmd) string {
			return mock.FullName()
		},
	)
	// stub Int
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Int",
		func(_ *redis.StringCmd) (int, error) {
			return mock.Int()
		},
	)
	// stub Int64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Int64",
		func(_ *redis.StringCmd) (int64, error) {
			return mock.Int64()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StringCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StringCmd) (string, error) {
			return mock.Result()
		},
	)
	// stub Scan
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Scan",
		func(_ *redis.StringCmd, val interface{}) error {
			return mock.Scan(val)
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StringCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StringCmd) string {
			return mock.String()
		},
	)
	// stub Time
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Time",
		func(_ *redis.StringCmd) (time.Time, error) {
			return mock.Time()
		},
	)
	// stub Uint64
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Uint64",
		func(_ *redis.StringCmd) (uint64, error) {
			return mock.Uint64()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StringCmd) string {
			return mock.Val()
		},
	)

	return
}

// StubStringIntMapCmdMock stub struct StringIntMapCmd
func StubStringIntMapCmdMock(ctl *gomock.Controller) (mock *MockStringIntMapCmdIFace, st *redis.StringIntMapCmd) {
	mock = NewMockStringIntMapCmdIFace(ctl)
	st = &redis.StringIntMapCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StringIntMapCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StringIntMapCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StringIntMapCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StringIntMapCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StringIntMapCmd) (map[string]int64, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StringIntMapCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StringIntMapCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StringIntMapCmd) map[string]int64 {
			return mock.Val()
		},
	)

	return
}

// StubStringSliceCmdMock stub struct StringSliceCmd
func StubStringSliceCmdMock(ctl *gomock.Controller) (mock *MockStringSliceCmdIFace, st *redis.StringSliceCmd) {
	mock = NewMockStringSliceCmdIFace(ctl)
	st = &redis.StringSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StringSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StringSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StringSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StringSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StringSliceCmd) ([]string, error) {
			return mock.Result()
		},
	)
	// stub ScanSlice
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "ScanSlice",
		func(_ *redis.StringSliceCmd, container interface{}) error {
			return mock.ScanSlice(container)
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StringSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StringSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StringSliceCmd) []string {
			return mock.Val()
		},
	)

	return
}

// StubStringStringMapCmdMock stub struct StringStringMapCmd
func StubStringStringMapCmdMock(ctl *gomock.Controller) (mock *MockStringStringMapCmdIFace, st *redis.StringStringMapCmd) {
	mock = NewMockStringStringMapCmdIFace(ctl)
	st = &redis.StringStringMapCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StringStringMapCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StringStringMapCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StringStringMapCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StringStringMapCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StringStringMapCmd) (map[string]string, error) {
			return mock.Result()
		},
	)
	// stub Scan
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Scan",
		func(_ *redis.StringStringMapCmd, dst interface{}) error {
			return mock.Scan(dst)
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StringStringMapCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StringStringMapCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StringStringMapCmd) map[string]string {
			return mock.Val()
		},
	)

	return
}

// StubStringStructMapCmdMock stub struct StringStructMapCmd
func StubStringStructMapCmdMock(ctl *gomock.Controller) (mock *MockStringStructMapCmdIFace, st *redis.StringStructMapCmd) {
	mock = NewMockStringStructMapCmdIFace(ctl)
	st = &redis.StringStructMapCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.StringStructMapCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.StringStructMapCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.StringStructMapCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.StringStructMapCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.StringStructMapCmd) (map[string]struct{}, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.StringStructMapCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.StringStructMapCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.StringStructMapCmd) map[string]struct{} {
			return mock.Val()
		},
	)

	return
}

// StubTimeCmdMock stub struct TimeCmd
func StubTimeCmdMock(ctl *gomock.Controller) (mock *MockTimeCmdIFace, st *redis.TimeCmd) {
	mock = NewMockTimeCmdIFace(ctl)
	st = &redis.TimeCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.TimeCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.TimeCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.TimeCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.TimeCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.TimeCmd) (time.Time, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.TimeCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.TimeCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.TimeCmd) time.Time {
			return mock.Val()
		},
	)

	return
}

// StubXAutoClaimCmdMock stub struct XAutoClaimCmd
func StubXAutoClaimCmdMock(ctl *gomock.Controller) (mock *MockXAutoClaimCmdIFace, st *redis.XAutoClaimCmd) {
	mock = NewMockXAutoClaimCmdIFace(ctl)
	st = &redis.XAutoClaimCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XAutoClaimCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XAutoClaimCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XAutoClaimCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XAutoClaimCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XAutoClaimCmd) ([]redis.XMessage, string, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XAutoClaimCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XAutoClaimCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XAutoClaimCmd) ([]redis.XMessage, string) {
			return mock.Val()
		},
	)

	return
}

// StubXAutoClaimJustIDCmdMock stub struct XAutoClaimJustIDCmd
func StubXAutoClaimJustIDCmdMock(ctl *gomock.Controller) (mock *MockXAutoClaimJustIDCmdIFace, st *redis.XAutoClaimJustIDCmd) {
	mock = NewMockXAutoClaimJustIDCmdIFace(ctl)
	st = &redis.XAutoClaimJustIDCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XAutoClaimJustIDCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XAutoClaimJustIDCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XAutoClaimJustIDCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XAutoClaimJustIDCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XAutoClaimJustIDCmd) ([]string, string, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XAutoClaimJustIDCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XAutoClaimJustIDCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XAutoClaimJustIDCmd) ([]string, string) {
			return mock.Val()
		},
	)

	return
}

// StubXInfoConsumersCmdMock stub struct XInfoConsumersCmd
func StubXInfoConsumersCmdMock(ctl *gomock.Controller) (mock *MockXInfoConsumersCmdIFace, st *redis.XInfoConsumersCmd) {
	mock = NewMockXInfoConsumersCmdIFace(ctl)
	st = &redis.XInfoConsumersCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XInfoConsumersCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XInfoConsumersCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XInfoConsumersCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XInfoConsumersCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XInfoConsumersCmd) ([]redis.XInfoConsumer, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XInfoConsumersCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XInfoConsumersCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XInfoConsumersCmd) []redis.XInfoConsumer {
			return mock.Val()
		},
	)

	return
}

// StubXInfoGroupsCmdMock stub struct XInfoGroupsCmd
func StubXInfoGroupsCmdMock(ctl *gomock.Controller) (mock *MockXInfoGroupsCmdIFace, st *redis.XInfoGroupsCmd) {
	mock = NewMockXInfoGroupsCmdIFace(ctl)
	st = &redis.XInfoGroupsCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XInfoGroupsCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XInfoGroupsCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XInfoGroupsCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XInfoGroupsCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XInfoGroupsCmd) ([]redis.XInfoGroup, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XInfoGroupsCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XInfoGroupsCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XInfoGroupsCmd) []redis.XInfoGroup {
			return mock.Val()
		},
	)

	return
}

// StubXInfoStreamCmdMock stub struct XInfoStreamCmd
func StubXInfoStreamCmdMock(ctl *gomock.Controller) (mock *MockXInfoStreamCmdIFace, st *redis.XInfoStreamCmd) {
	mock = NewMockXInfoStreamCmdIFace(ctl)
	st = &redis.XInfoStreamCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XInfoStreamCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XInfoStreamCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XInfoStreamCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XInfoStreamCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XInfoStreamCmd) (*redis.XInfoStream, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XInfoStreamCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XInfoStreamCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XInfoStreamCmd) *redis.XInfoStream {
			return mock.Val()
		},
	)

	return
}

// StubXInfoStreamFullCmdMock stub struct XInfoStreamFullCmd
func StubXInfoStreamFullCmdMock(ctl *gomock.Controller) (mock *MockXInfoStreamFullCmdIFace, st *redis.XInfoStreamFullCmd) {
	mock = NewMockXInfoStreamFullCmdIFace(ctl)
	st = &redis.XInfoStreamFullCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XInfoStreamFullCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XInfoStreamFullCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XInfoStreamFullCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XInfoStreamFullCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XInfoStreamFullCmd) (*redis.XInfoStreamFull, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XInfoStreamFullCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XInfoStreamFullCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XInfoStreamFullCmd) *redis.XInfoStreamFull {
			return mock.Val()
		},
	)

	return
}

// StubXMessageSliceCmdMock stub struct XMessageSliceCmd
func StubXMessageSliceCmdMock(ctl *gomock.Controller) (mock *MockXMessageSliceCmdIFace, st *redis.XMessageSliceCmd) {
	mock = NewMockXMessageSliceCmdIFace(ctl)
	st = &redis.XMessageSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XMessageSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XMessageSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XMessageSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XMessageSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XMessageSliceCmd) ([]redis.XMessage, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XMessageSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XMessageSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XMessageSliceCmd) []redis.XMessage {
			return mock.Val()
		},
	)

	return
}

// StubXPendingCmdMock stub struct XPendingCmd
func StubXPendingCmdMock(ctl *gomock.Controller) (mock *MockXPendingCmdIFace, st *redis.XPendingCmd) {
	mock = NewMockXPendingCmdIFace(ctl)
	st = &redis.XPendingCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XPendingCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XPendingCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XPendingCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XPendingCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XPendingCmd) (*redis.XPending, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XPendingCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XPendingCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XPendingCmd) *redis.XPending {
			return mock.Val()
		},
	)

	return
}

// StubXPendingExtCmdMock stub struct XPendingExtCmd
func StubXPendingExtCmdMock(ctl *gomock.Controller) (mock *MockXPendingExtCmdIFace, st *redis.XPendingExtCmd) {
	mock = NewMockXPendingExtCmdIFace(ctl)
	st = &redis.XPendingExtCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XPendingExtCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XPendingExtCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XPendingExtCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XPendingExtCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XPendingExtCmd) ([]redis.XPendingExt, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XPendingExtCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XPendingExtCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XPendingExtCmd) []redis.XPendingExt {
			return mock.Val()
		},
	)

	return
}

// StubXStreamSliceCmdMock stub struct XStreamSliceCmd
func StubXStreamSliceCmdMock(ctl *gomock.Controller) (mock *MockXStreamSliceCmdIFace, st *redis.XStreamSliceCmd) {
	mock = NewMockXStreamSliceCmdIFace(ctl)
	st = &redis.XStreamSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.XStreamSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.XStreamSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.XStreamSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.XStreamSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.XStreamSliceCmd) ([]redis.XStream, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.XStreamSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.XStreamSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.XStreamSliceCmd) []redis.XStream {
			return mock.Val()
		},
	)

	return
}

// StubZSliceCmdMock stub struct ZSliceCmd
func StubZSliceCmdMock(ctl *gomock.Controller) (mock *MockZSliceCmdIFace, st *redis.ZSliceCmd) {
	mock = NewMockZSliceCmdIFace(ctl)
	st = &redis.ZSliceCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.ZSliceCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.ZSliceCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.ZSliceCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.ZSliceCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.ZSliceCmd) ([]redis.Z, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.ZSliceCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.ZSliceCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.ZSliceCmd) []redis.Z {
			return mock.Val()
		},
	)

	return
}

// StubZWithKeyCmdMock stub struct ZWithKeyCmd
func StubZWithKeyCmdMock(ctl *gomock.Controller) (mock *MockZWithKeyCmdIFace, st *redis.ZWithKeyCmd) {
	mock = NewMockZWithKeyCmdIFace(ctl)
	st = &redis.ZWithKeyCmd{}
	// stub Args
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Args",
		func(_ *redis.ZWithKeyCmd) []interface{} {
			return mock.Args()
		},
	)
	// stub Err
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Err",
		func(_ *redis.ZWithKeyCmd) error {
			return mock.Err()
		},
	)
	// stub FullName
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "FullName",
		func(_ *redis.ZWithKeyCmd) string {
			return mock.FullName()
		},
	)
	// stub Name
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Name",
		func(_ *redis.ZWithKeyCmd) string {
			return mock.Name()
		},
	)
	// stub Result
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Result",
		func(_ *redis.ZWithKeyCmd) (*redis.ZWithKey, error) {
			return mock.Result()
		},
	)
	// stub SetErr
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "SetErr",
		func(_ *redis.ZWithKeyCmd, e error) {
			mock.SetErr(e)
			return
		},
	)
	// stub String
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "String",
		func(_ *redis.ZWithKeyCmd) string {
			return mock.String()
		},
	)
	// stub Val
	monkey.PatchInstanceMethod(reflect.TypeOf(st), "Val",
		func(_ *redis.ZWithKeyCmd) *redis.ZWithKey {
			return mock.Val()
		},
	)

	return
}
