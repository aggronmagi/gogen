// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen option -f -a"
// Version: 0.0.1

package sample

var _ = SpecOptionDeclareWithDefault()

// HTTP parsing and communication with DNS resolver was successful, and the response body content is a DNS response in either binary or JSON encoding,
// depending on the query endpoint, Accept header and GET parameters.
type SpecOptions struct {
	// test comment 5
	// test comment 6
	TestNil1  interface{} // test comment 1
	TestBool1 bool        // test comment 2
	// 这里是函数注释3
	// 这里是函数注释4
	TestInt1      int
	TestNilFunc1  (func()) // 中文2
	TestReserved2 []byte
	// sql.DB对外暴露出了其运行时的状态db.DBStats，sql.DB在关闭，创建，释放连接时候，会维护更新这个状态。
	// 我们可以通过prometheus来收集连接池状态，然后在grafana面板上配置指标，使指标可以动态的展示。
	TestReserved2Inner1 int
	// Test Append Func
	SliceOpt []int32
}

// test comment 5
// test comment 6
func WithSpecOptionsTestNil1(v interface{}) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestNil1
		cc.TestNil1 = v
		return WithSpecOptionsTestNil1(previous)
	}
}
func WithSpecOptionsTestBool1(v bool) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestBool1
		cc.TestBool1 = v
		return WithSpecOptionsTestBool1(previous)
	}
}

// 这里是函数注释3
// 这里是函数注释4
func WithSpecOptionsTestInt1(v int) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestInt1
		cc.TestInt1 = v
		return WithSpecOptionsTestInt1(previous)
	}
}
func WithSpecOptionsTestNilFunc1(v func()) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestNilFunc1
		cc.TestNilFunc1 = v
		return WithSpecOptionsTestNilFunc1(previous)
	}
}
func withSpecOptionsTestReserved2(v []byte) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestReserved2
		cc.TestReserved2 = v
		return withSpecOptionsTestReserved2(previous)
	}
}

// sql.DB对外暴露出了其运行时的状态db.DBStats，sql.DB在关闭，创建，释放连接时候，会维护更新这个状态。
// 我们可以通过prometheus来收集连接池状态，然后在grafana面板上配置指标，使指标可以动态的展示。
func WithSpecOptionsTestReserved2Inner1(v int) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.TestReserved2Inner1
		cc.TestReserved2Inner1 = v
		return WithSpecOptionsTestReserved2Inner1(previous)
	}
}

// Test Append Func
func WithSpecOptionsSliceOpt(v ...int32) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.SliceOpt
		cc.SliceOpt = v
		return WithSpecOptionsSliceOpt(previous...)
	}
}
func AppendSpecOptionsSliceOpt(v ...int32) SpecOption {
	return func(cc *SpecOptions) SpecOption {
		previous := cc.SliceOpt
		new := make([]int32, 0, len(v)+len(previous))
		new = append(new, previous...)
		new = append(new, v...)
		cc.SliceOpt = new
		return WithSpecOptionsSliceOpt(previous...)
	}
}

// SetOption modify options
func (cc *SpecOptions) SetOption(opt SpecOption) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *SpecOptions) ApplyOption(opts ...SpecOption) {
	for _, opt := range opts {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *SpecOptions) GetSetOption(opt SpecOption) SpecOption {
	return opt(cc)
}

// SpecOption option define
type SpecOption func(cc *SpecOptions) SpecOption

// NewSpecOptions create options instance.
func NewSpecOptions(opts ...SpecOption) *SpecOptions {
	cc := newDefaultSpecOptions()
	for _, opt := range opts {
		_ = opt(cc)
	}
	if watchDogSpecOptions != nil {
		watchDogSpecOptions(cc)
	}
	return cc
}

// InstallSpecOptionsWatchDog install watch dog
func InstallSpecOptionsWatchDog(dog func(cc *SpecOptions)) {
	watchDogSpecOptions = dog
}

var watchDogSpecOptions func(cc *SpecOptions)

// newDefaultSpecOptions new option with default value
func newDefaultSpecOptions() *SpecOptions {
	cc := &SpecOptions{
		TestNil1:            nil,
		TestBool1:           false,
		TestInt1:            32,
		TestNilFunc1:        nil,
		TestReserved2:       nil,
		TestReserved2Inner1: 1,
		SliceOpt:            nil,
	}
	return cc
}
