* gogen
golang generate tool collection and merge.

| command  | source   |                                                    |
|----------+----------+----------------------------------------------------|
| stringer | [[https://pkg.go.dev/golang.org/x/tools/cmd/stringer][stringer]] | generate fmt.Stringer interface for const integer. |
| import   |          | import const type and value from another package.  |

** stringer
sample source code
[[testdata/test.go][github.com/aggronmagi/gogen/testdata/test.go]]
#+begin_src go

// TestType test type comment 1
// second line comment
type TestType int // comment 2

const (
	// T1 comment 11
	T1 TestType = iota // line suffix comment 1
	// T2 comment 22
	T2
	T3 // T3 line suffix comment 1
)
#+end_src

generete:
#+begin_src go
// Code generated by "gogen stringer"; DO NOT EDIT.
// Exec: "gogen stringer -t TestType"
// Version: 0.0.1

package testdata

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[T1-0]
	_ = x[T2-1]
	_ = x[T3-2]
}

const _TestType_name = "T1T2T3"

var _TestType_index = [...]uint8{0, 2, 4, 6}

func (i TestType) String() string {
	if i < 0 || i >= TestType(len(_TestType_index)-1) {
		return "TestType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TestType_name[_TestType_index[i]:_TestType_index[i+1]]
}

#+end_src

** import
sample source code
[[testdata/test.go][github.com/aggronmagi/gogen/testdata/test.go]]
#+begin_src go

// TestType test type comment 1
// second line comment
type TestType int // comment 2

const (
	// T1 comment 11
	T1 TestType = iota // line suffix comment 1
	// T2 comment 22
	T2
	T3 // T3 line suffix comment 1
)
#+end_src
generate code
#+begin_src go
// Code generated by "gogen import"; DO NOT EDIT.
// Exec: "gogen import ./testdata -t TestType"
// Version: 0.0.1

package main

import testdata "github.com/aggronmagi/gogen/testdata"

// TestType test type comment 1
// second line comment
type TestType = testdata.TestType // comment 2

const (
	// T1 comment 11
	T1 = testdata.T1 // line suffix comment 1
	// T2 comment 22
	T2 = testdata.T2
	T3 = testdata.T3 // T3 line suffix comment 1
)

#+end_src

