package option

const tplOption = `// Code generated by "gogen option"; DO NOT EDIT.
// Exec: "gogen {{.ExecArgs}}" {{ $obj := . }}
// Version: {{.Version}}

package {{.PackageName}}

$Import-Package$

var _ = {{ .FromFunc}}()

{{Doc .Document}} type {{.Name}} struct { {{ range $i,$field := .Fields }}
	{{ Doc $field.Document }} {{ $field.Name }} {{ $field.Type }} {{TailDoc $field.Comment}} {{ end }}
}

{{ range $i,$field := .Fields }}
{{ Doc $field.Document }} func {{ $field.GenFuncName $obj.OptionName }}(v {{if $field.IsSlice }}...{{$field.SliceType}}{{else}}{{$field.Type}}{{end}}) {{ $obj.OptionName }} {
	return func(cc *{{ $obj.Name }}) {{ $obj.OptionName }} {
		previous := cc.{{ $field.Name }}
		cc.{{ $field.Name }} = v
		return {{ $field.GenFuncName $obj.OptionName }}(previous{{if $field.IsSlice }}...{{end}})
	}
}
{{ if and $field.IsSlice $obj.GenAppend }}
func {{ $field.AppendFuncName $obj.OptionName }}(v ...{{ $field.SliceType }}) {{ $obj.OptionName }} {
	return func(cc *{{ $obj.Name }}) {{ .OptionName }} {
		previous := cc.{{ $field.Name }}
  		new := make([]{{ $field.SliceType }},0,len(v)+len(previous))
  		new = append(new, previous...)
  		new = append(new, v...)
		cc.{{ $field.Name }} = new
		return {{ $field.AppendFuncName $obj.OptionName }}(previous...)
	}
}
{{ end }}
{{ end }}

// SetOption modify options
func (cc *{{ .Name }}) SetOption(opt {{ .OptionName }}) {
	_ = opt(cc)
}

// ApplyOption modify options
func (cc *{{ .Name }}) ApplyOption(opts... {{ .OptionName }}) {
	for _, opt := range opts  {
		_ = opt(cc)
	}
}

// GetSetOption modify and get last option
func (cc *{{ .Name }}) GetSetOption(opt {{ .OptionName }}) {{ .OptionName }} {
	return opt(cc)
}

// {{ .OptionName }} option define 
type {{ .OptionName }} func(cc *{{ .Name }}) {{ .OptionName }}

// New{{ .Name }} create options instance.
func New{{ .Name }}(opts ... {{ .OptionName }}) *{{ .Name }} {
	cc := newDefault{{ .Name }}()
	for _, opt := range opts  {
		_ = opt(cc)
	}
	if watchDog{{ .Name }} != nil {
		watchDog{{ .Name }}(cc)
	}
	return cc
}

// Install{{ .Name }}WatchDog install watch dog
func Install{{ .Name }}WatchDog(dog func(cc *{{ .Name }})) {
	watchDog{{ .Name }} = dog
}

var watchDog{{ .Name }} func(cc *{{ .Name }})

// newDefault{{ .Name }} new option with default value
func newDefault{{ .Name }} () *{{ .Name }} {
	cc := &{{ .Name }}{
{{ range $i,$field := .Fields -}}
	{{ if eq $field.FieldType 0 -}}
		{{ $field.Name }} : {{ $field.Type }} {{ $field.Body }},
	{{ else -}}
		{{ $field.Name }} : {{ $field.Body }},
	{{ end -}}
{{ end }}
	}
	return cc
}

`
