// importer is a tool like stringer. it import const value and type from another package.
package importer

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"unicode"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"golang.org/x/tools/go/packages"
)

// command config
var config = struct {
	TypeNames  []string
	ToPkg      string
	Output     string
	TrimPrefix string
	BuildTags  []string
}{
	TypeNames:  []string{},
	ToPkg:      ".",
	Output:     "",
	TrimPrefix: "",
	BuildTags:  []string{},
}

// Version generate tool version
var Version string = "0.0.1"

// Flags generate tool flags
func Flags(set *pflag.FlagSet) {
	set.StringSliceVarP(&config.TypeNames, "type", "t", config.TypeNames, "list of type names; must be set")
	set.StringVarP(&config.Output, "output", "o", config.Output, "output file name; default srcdir/<type>_import.go")
	set.StringVar(&config.ToPkg, "to", config.ToPkg, "which package be imported, extract the package from this folder")
	set.StringVarP(&config.TrimPrefix, "trimprefix", "p", config.TrimPrefix, "trim the `prefix` from the generated constant names")
	set.StringSliceVar(&config.BuildTags, "tags", config.BuildTags, "comma-separated list of build tags to apply")
}

// RunCommand run generate command
func RunCommand(cmd *cobra.Command, args []string) {

	types := config.TypeNames
	tags := config.BuildTags

	if len(config.TypeNames) < 1 {
		log.Println("not set -t or --type")
		cmd.Help()
		os.Exit(2)
	}

	// We accept either one directory or a list of files. Which do we have?
	if len(args) == 0 {
		log.Println("not input files or directory")
		cmd.Help()
		os.Exit(2)
	}

	// Parse the package once.
	var dir string
	g := Generator{
		trimPrefix: config.TrimPrefix,
	}
	// TODO(suzmue): accept other patterns for packages (directories, list of files, import paths, etc).
	if len(args) == 1 && isDirectory(args[0]) {
		dir = args[0]
	} else {
		if len(tags) != 0 {
			log.Fatal("-tags option applies only to directories, not when files are specified")
		}
		dir = filepath.Dir(args[0])
	}

	g.parsePackage(config.ToPkg, args, tags)

	_ = dir

	// Print the header and package clause.
	g.Printf("// Code generated by \"gogen import\"; DO NOT EDIT.\n")
	g.Printf("// Exec: \"gogen %s\"\n// Version: %s \n", strings.Join(os.Args[1:], " "), Version)
	g.Printf("\n")
	g.Printf("package %s", g.pkg.toPkg)
	g.Printf("\n")
	g.Printf("import %s \"%s\"\n", g.pkg.name, g.pkg.fromPkg) // Used by all methods.

	// Run generate for each type.
	for _, typeName := range types {
		g.generate(typeName)
	}

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := config.Output
	if outputName == "" {
		outputName = fmt.Sprintf("%s_import.go", strings.ToLower(types[0]))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.

	trimPrefix string
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) PrintDoc(docs string) {
	if len(docs) < 1 {
		return
	}
	list := strings.Split(docs, "\n")
	for _, v := range list {
		g.Printf("// %s\n", strings.TrimSpace(v))
	}
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string  // Name of the constant type.
	values   []Value // Accumulator for constant values of that type.

	trimPrefix  string
	lineComment bool
}

type Package struct {
	toPkg       string
	fromPkg     string
	name        string
	defs        map[*ast.Ident]types.Object
	files       []*File
	typeDoc     string
	typeComment string
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(topkg string, patterns []string, tags []string) {
	src := &packages.Config{
		Mode:       packages.NeedName,
		Dir:        ".",
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
		Tests:      false,
	}
	srcPkgs, err := packages.Load(src, topkg)
	if err != nil {
		log.Fatal(err)
	}
	if len(srcPkgs) != 1 {
		log.Fatalf("error: current path %d packages found", len(srcPkgs))
	}
	cfg := &packages.Config{
		Mode: packages.LoadSyntax,
		// TODO: Need to think about constants in test files. Maybe write type_string_test.go
		// in a separate pass? For later.
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.addPackage(pkgs[0], srcPkgs[0].Name)
}

// addPackage adds a type checked Package and its syntax files to the generator.
func (g *Generator) addPackage(pkg *packages.Package, srcPkg string) {
	g.pkg = &Package{
		toPkg:   srcPkg,
		fromPkg: pkg.PkgPath,
		name:    pkg.Name,
		defs:    pkg.TypesInfo.Defs,
		files:   make([]*File, len(pkg.Syntax)),
	}

	for i, file := range pkg.Syntax {
		g.pkg.files[i] = &File{
			file:       file,
			pkg:        g.pkg,
			trimPrefix: g.trimPrefix,
		}
	}
}

// generate produces the String method for the named type.
func (g *Generator) generate(typeName string) {
	values := make([]Value, 0, 100)
	g.pkg.typeComment = ""
	g.pkg.typeDoc = ""
	// type declare
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		if file.file != nil {
			ast.Inspect(file.file, file.genTypeDecl)
		}
	}
	// values
	for _, file := range g.pkg.files {
		// Set the state for this run of the walker.
		file.typeName = typeName
		file.values = nil
		if file.file != nil {
			ast.Inspect(file.file, file.genDecl)
			values = append(values, file.values...)
		}
	}

	// if len(values) == 0 {
	// 	log.Fatalf("no values defined for type %s", typeName)
	// }

	// We use stable sort so the lexically first name is chosen for equal elements.
	sort.Stable(byValue(values))

	g.PrintDoc(g.pkg.typeDoc)
	g.Printf("type %[1]s = %[2]s.%[1]s", typeName, g.pkg.name)
	if len(g.pkg.typeComment) > 0 {
		g.Printf(" // %s\n", g.pkg.typeComment)
	} else {
		g.Printf("\n")
	}
	g.Printf("\n")

	if len(values) > 0 {
		g.Printf("const (\n")
		for _, v := range values {
			g.PrintDoc(v.doc)
			g.Printf("\t%[1]s = %[2]s.%[3]s", v.name, g.pkg.name, v.originalName)
			if len(v.comment) > 0 {
				g.Printf(" // %s\n", v.comment)
			} else {
				g.Printf("\n")
			}
		}
		g.Printf(")\n")
	}

}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Value represents a declared constant.
type Value struct {
	originalName string // The name of the constant.
	name         string // The name with trimmed prefix.
	doc          string
	comment      string
}

func (v *Value) String() string {
	return v.originalName
}

// byValue lets us sort the constants into increasing order.
// We take care in the Less method to sort in signed or unsigned order,
// as appropriate.
type byValue []Value

func (b byValue) Len() int      { return len(b) }
func (b byValue) Swap(i, j int) { b[i], b[j] = b[j], b[i] }
func (b byValue) Less(i, j int) bool {
	return b[i].name < b[j].name
}

func (f *File) genTypeDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.TYPE {
		// We only care about const type define.
		return true
	}

	tspec, ok := decl.Specs[0].(*ast.TypeSpec)
	if !ok {
		return true
	}
	if tspec.Name.String() != f.typeName {
		return true
	}
	if decl.Doc != nil {
		f.pkg.typeDoc = strings.TrimSpace(decl.Doc.Text())
	}
	if tspec.Comment != nil {
		f.pkg.typeComment = strings.TrimSpace(tspec.Comment.Text())
	}

	return false
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.GenDecl)
	if !ok || decl.Tok != token.CONST {
		// We only care about const declarations.
		return true
	}
	// The name of the type of the constants we are declaring.
	// Can change if this is a multi-element declaration.
	typ := ""
	// Loop over the elements of the declaration. Each element is a ValueSpec:
	// a list of names possibly followed by a type, possibly followed by values.
	// If the type and value are both missing, we carry down the type (and value,
	// but the "go/types" package takes care of that).
	for _, spec := range decl.Specs {
		vspec := spec.(*ast.ValueSpec) // Guaranteed to succeed as this is CONST.
		if vspec.Type == nil && len(vspec.Values) > 0 {
			// "X = 1". With no type but a value. If the constant is untyped,
			// skip this vspec and reset the remembered type.
			typ = ""

			// If this is a simple type conversion, remember the type.
			// We don't mind if this is actually a call; a qualified call won't
			// be matched (that will be SelectorExpr, not Ident), and only unusual
			// situations will result in a function call that appears to be
			// a type conversion.
			ce, ok := vspec.Values[0].(*ast.CallExpr)
			if !ok {
				continue
			}
			id, ok := ce.Fun.(*ast.Ident)
			if !ok {
				continue
			}
			typ = id.Name
		}
		if vspec.Type != nil {
			// "X T". We have a type. Remember it.
			ident, ok := vspec.Type.(*ast.Ident)
			if !ok {
				continue
			}
			typ = ident.Name
		}
		if typ != f.typeName {
			// This is not the type we're looking for.
			continue
		}

		// We now have a list of names (from one line of source code) all being
		// declared with the desired type.
		// Grab their names and actual values and store them in f.values.
		for _, name := range vspec.Names {
			if name.Name == "_" {
				continue
			}
			// // This dance lets the type checker find the values for us. It's a
			// // bit tricky: look up the object declared by the name, find its
			// // types.Const, and extract its value.
			// obj, ok := f.pkg.defs[name]
			// if !ok {
			// 	log.Fatalf("no value for constant %s", name)
			// }
			// unexport value
			if unicode.IsLower([]rune(name.Name)[0]) {
				continue
			}

			v := Value{
				originalName: name.Name,
			}
			if vspec.Doc != nil {
				v.doc = strings.TrimSpace(vspec.Doc.Text())
			}
			if c := vspec.Comment; c != nil {
				v.comment = strings.TrimSpace(c.Text())
			}
			v.name = strings.TrimPrefix(v.originalName, f.trimPrefix)
			f.values = append(f.values, v)
		}
	}
	return false
}

// Helpers

// usize returns the number of bits of the smallest unsigned integer
// type that will hold n. Used to create the smallest possible slice of
// integers to use as indexes into the concatenated strings.
func usize(n int) int {
	switch {
	case n < 1<<8:
		return 8
	case n < 1<<16:
		return 16
	default:
		// 2^32 is enough constants for anyone.
		return 32
	}
}

// declareIndexAndNameVars declares the index slices and concatenated names
// strings representing the runs of values.
func (g *Generator) declareIndexAndNameVars(runs [][]Value, typeName string) {
	var indexes, names []string
	for i, run := range runs {
		index, name := g.createIndexAndNameDecl(run, typeName, fmt.Sprintf("_%d", i))
		if len(run) != 1 {
			indexes = append(indexes, index)
		}
		names = append(names, name)
	}
	g.Printf("const (\n")
	for _, name := range names {
		g.Printf("\t%s\n", name)
	}
	g.Printf(")\n\n")

	if len(indexes) > 0 {
		g.Printf("var (")
		for _, index := range indexes {
			g.Printf("\t%s\n", index)
		}
		g.Printf(")\n\n")
	}
}

// declareIndexAndNameVar is the single-run version of declareIndexAndNameVars
func (g *Generator) declareIndexAndNameVar(run []Value, typeName string) {
	index, name := g.createIndexAndNameDecl(run, typeName, "")
	g.Printf("const %s\n", name)
	g.Printf("var %s\n", index)
}

// createIndexAndNameDecl returns the pair of declarations for the run. The caller will add "const" and "var".
func (g *Generator) createIndexAndNameDecl(run []Value, typeName string, suffix string) (string, string) {
	b := new(bytes.Buffer)
	indexes := make([]int, len(run))
	for i := range run {
		b.WriteString(run[i].name)
		indexes[i] = b.Len()
	}
	nameConst := fmt.Sprintf("_%s_name%s = %q", typeName, suffix, b.String())
	nameLen := b.Len()
	b.Reset()
	fmt.Fprintf(b, "_%s_index%s = [...]uint%d{0, ", typeName, suffix, usize(nameLen))
	for i, v := range indexes {
		if i > 0 {
			fmt.Fprintf(b, ", ")
		}
		fmt.Fprintf(b, "%d", v)
	}
	fmt.Fprintf(b, "}")
	return b.String(), nameConst
}

// declareNameVars declares the concatenated names string representing all the values in the runs.
func (g *Generator) declareNameVars(runs [][]Value, typeName string, suffix string) {
	g.Printf("const _%s_name%s = \"", typeName, suffix)
	for _, run := range runs {
		for i := range run {
			g.Printf("%s", run[i].name)
		}
	}
	g.Printf("\"\n")
}
